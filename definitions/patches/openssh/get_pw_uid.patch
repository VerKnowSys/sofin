--- ssh.c.orig	2012-04-16 13:53:24.000000000 +0200
+++ ssh.c	2012-04-16 15:11:53.000000000 +0200
@@ -267,14 +267,23 @@
 			fatal("setrlimit failed: %.100s", strerror(errno));
 	}
 #endif
-	/* Get user data. */
-	pw = getpwuid(original_real_uid);
-	if (!pw) {
-		logit("You don't exist, go away!");
-		exit(255);
-	}
-	/* Take a copy of the returned structure. */
-	pw = pwcopy(pw);
+
+    /* Create record for passwd structure on our own.. We don't have passwd support in ServeD */
+    pw = (struct passwd *)malloc(sizeof(struct passwd));
+    if (pw == 0) {
+        fatal("Unable to allocate memory for passwd struct.");
+    }
+    char homeDir[16];
+    char userName[16];
+    sprintf(homeDir, "%s", "/Users/");
+    sprintf(userName, "%d", original_real_uid);
+    strcat(homeDir, userName);
+
+    pw->pw_uid = original_real_uid;
+    pw->pw_gid = 0; /* wheel */
+    pw->pw_name = (char *)malloc((strlen(userName)+1)*sizeof(char));
+    pw->pw_dir = (char *)malloc((strlen(homeDir)+1)*sizeof(char));
+    
 
 	/*
 	 * Set our umask to something reasonable, as some files are created
@@ -849,7 +858,7 @@
 	 * directory if it doesn't already exist.
 	 */
 	r = snprintf(buf, sizeof buf, "%s%s%s", pw->pw_dir,
-	    strcmp(pw->pw_dir, "/") ? "/" : "", _PATH_SSH_USER_DIR);
+	    strcmp(pw->pw_dir, "/") ? "/" : "", homeDir);
 	if (r > 0 && (size_t)r < sizeof(buf) && stat(buf, &st) < 0) {
 #ifdef WITH_SELINUX
 		ssh_selinux_setfscreatecon(buf);
@@ -1481,8 +1490,21 @@
 		xfree(keys);
 	}
 #endif /* ENABLE_PKCS11 */
-	if ((pw = getpwuid(original_real_uid)) == NULL)
-		fatal("load_public_identity_files: getpwuid failed");
+
+    pw = (struct passwd *)malloc(sizeof(struct passwd));
+    if (pw == 0) {
+        fatal("Unable to allocate memory for passwd struct.");
+    }
+    char homeDir[16];
+    char userName[16];
+    sprintf(homeDir, "%s", "/Users/");
+    sprintf(userName, "%d", original_real_uid);
+    strcat(homeDir, userName);
+    pw->pw_uid = original_real_uid;
+    pw->pw_gid = 0; /* wheel */
+    pw->pw_name = (char *)malloc((strlen(userName)+1)*sizeof(char));
+    pw->pw_dir = (char *)malloc((strlen(homeDir)+1)*sizeof(char));    
+
 	pwname = xstrdup(pw->pw_name);
 	pwdir = xstrdup(pw->pw_dir);
 	if (gethostname(thishost, sizeof(thishost)) == -1)
