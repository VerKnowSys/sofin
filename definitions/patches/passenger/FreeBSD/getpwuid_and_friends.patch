diff --git ext/common/AccountsDatabase.cpp ext/common/AccountsDatabase.cpp
index 7e8bdf8..e74a312 100644
--- ext/common/AccountsDatabase.cpp
+++ ext/common/AccountsDatabase.cpp
@@ -42,26 +42,11 @@ AccountsDatabase::createDefault(const ServerInstanceDir::GenerationPtr &generati
                                 const string &defaultGroup)
 {
 	AccountsDatabasePtr database(new AccountsDatabase());
-	struct passwd *defaultUserEntry;
-	struct group  *defaultGroupEntry;
-	uid_t defaultUid;
-	gid_t defaultGid;
+	uid_t defaultUid = getuid();
+	gid_t defaultGid = 0;
 	RandomGenerator random;
 	string passengerStatusPassword = random.generateByteString(MESSAGE_SERVER_MAX_PASSWORD_SIZE);
 	
-	defaultUserEntry = getpwnam(defaultUser.c_str());
-	if (defaultUserEntry == NULL) {
-		throw NonExistentUserException("Default user '" + defaultUser +
-			"' does not exist.");
-	}
-	defaultUid = defaultUserEntry->pw_uid;
-	defaultGroupEntry = getgrnam(defaultGroup.c_str());
-	if (defaultGroupEntry == NULL) {
-		throw NonExistentGroupException("Default group '" + defaultGroup +
-			"' does not exist.");
-	}
-	defaultGid = defaultGroupEntry->gr_gid;
-	
 	// An account for the 'passenger-status' command. Its password is only readable by
 	// root, or (if user switching is turned off) only by the web server's user.
 	database->add("_passenger-status", passengerStatusPassword, false,
diff --git ext/common/LoggingAgent/Main.cpp ext/common/LoggingAgent/Main.cpp
index 63ffffb..48200c9 100644
--- ext/common/LoggingAgent/Main.cpp
+++ ext/common/LoggingAgent/Main.cpp
@@ -77,23 +77,23 @@ createEventLoop() {
 }
 
 static void
-lowerPrivilege(const string &username, const struct passwd *user, const struct group *group) {
+lowerPrivilege(const string &username) {
 	int e;
 	
-	if (initgroups(username.c_str(), group->gr_gid) != 0) {
+	if (initgroups(username.c_str(), 0) != 0) {
 		e = errno;
 		P_WARN("WARNING: Unable to set supplementary groups for " <<
 			"PassengerLoggingAgent: " << strerror(e) << " (" << e << ")");
 	}
-	if (setgid(group->gr_gid) != 0) {
+	if (setgid(0) != 0) {
 		e = errno;
 		P_WARN("WARNING: Unable to lower PassengerLoggingAgent's "
 			"privilege to that of user '" << username <<
-			"': cannot set group ID to " << group->gr_gid <<
+			"': cannot set group ID to " << 0 <<
 			": " << strerror(e) <<
 			" (" << e << ")");
 	}
-	if (setuid(user->pw_uid) != 0) {
+	if (setuid(getuid()) != 0) {
 		e = errno;
 		P_WARN("WARNING: Unable to lower PassengerLoggingAgent's "
 			"privilege to that of user '" << username <<
@@ -137,15 +137,9 @@ printInfo(ev::sig &watcher, int revents) {
 
 static string
 myself() {
-	struct passwd *entry = getpwuid(geteuid());
-	if (entry != NULL) {
-		return entry->pw_name;
-	} else {
-		throw NonExistentUserException(string("The current user, UID ") +
-			toString(geteuid()) + ", doesn't have a corresponding " +
-			"entry in the system's user database. Please fix your " +
-			"system's user database first.");
-	}
+	stringstream username;
+	username << getuid();
+	return username.str();
 }
 
 int
@@ -175,8 +169,6 @@ main(int argc, char *argv[]) {
 		/* Create all the necessary objects and sockets... */
 		AccountsDatabasePtr  accountsDatabase;
 		FileDescriptor       serverSocketFd;
-		struct passwd       *user;
-		struct group        *group;
 		int                  ret;
 		
 		eventLoop = createEventLoop();
@@ -192,51 +184,10 @@ main(int argc, char *argv[]) {
 			} while (ret == -1 && errno == EINTR);
 		}
 		
-		/* Sanity check user accounts. */
-		
-		user = getpwnam(username.c_str());
-		if (user == NULL) {
-			throw NonExistentUserException(string("The configuration option ") +
-				"'PassengerAnalyticsLogUser' (Apache) or " +
-				"'passenger_analytics_log_user' (Nginx) was set to '" +
-				username + "', but this user doesn't exist. Please fix " +
-				"the configuration option.");
-		}
-		
-		if (groupname.empty()) {
-			group = getgrgid(user->pw_gid);
-			if (group == NULL) {
-				throw NonExistentGroupException(string("The configuration option ") +
-					"'PassengerAnalyticsLogGroup' (Apache) or " +
-					"'passenger_analytics_log_group' (Nginx) wasn't set, " +
-					"so PassengerLoggingAgent tried to use the default group " +
-					"for user '" + username + "' - which is GID #" +
-					toString(user->pw_gid) + " - as the group for the analytics " +
-					"log dir, but this GID doesn't exist. " +
-					"You can solve this problem by explicitly " +
-					"setting PassengerAnalyticsLogGroup (Apache) or " +
-					"passenger_analytics_log_group (Nginx) to a group that " +
-					"does exist. In any case, it looks like your system's user " +
-					"database is broken; Phusion Passenger can work fine even " +
-					"with this broken user database, but you should still fix it.");
-			} else {
-				groupname = group->gr_name;
-			}
-		} else {
-			group = getgrnam(groupname.c_str());
-			if (group == NULL) {
-				throw NonExistentGroupException(string("The configuration option ") +
-					"'PassengerAnalyticsLogGroup' (Apache) or " +
-					"'passenger_analytics_log_group' (Nginx) was set to '" +
-					groupname + "', but this group doesn't exist. Please fix " +
-					"the configuration option.");
-			}
-		}
-		
 		/* Create the logging directory if necessary. */
 		if (getFileType(loggingDir) == FT_NONEXISTANT) {
 			if (geteuid() == 0) {
-				makeDirTree(loggingDir, permissions, user->pw_uid, group->gr_gid);
+				makeDirTree(loggingDir, permissions, getuid(), 0);
 			} else {
 				makeDirTree(loggingDir, permissions);
 			}
@@ -244,7 +195,7 @@ main(int argc, char *argv[]) {
 		
 		/* Now's a good time to lower the privilege. */
 		if (geteuid() == 0) {
-			lowerPrivilege(username, user, group);
+			lowerPrivilege(username);
 		}
 		
 		/* Now setup the actual logging server. */
diff --git ext/common/ServerInstanceDir.h ext/common/ServerInstanceDir.h
index 64a17a8..69d14a8 100644
--- ext/common/ServerInstanceDir.h
+++ ext/common/ServerInstanceDir.h
@@ -75,23 +75,11 @@ public:
 		{
 			TRACE_POINT();
 			bool runningAsRoot = geteuid() == 0;
-			struct passwd *defaultUserEntry;
-			struct group  *defaultGroupEntry;
 			uid_t defaultUid;
 			gid_t defaultGid;
 			
-			defaultUserEntry = getpwnam(defaultUser.c_str());
-			if (defaultUserEntry == NULL) {
-				throw NonExistentUserException("Default user '" + defaultUser +
-					"' does not exist.");
-			}
-			defaultUid = defaultUserEntry->pw_uid;
-			defaultGroupEntry = getgrnam(defaultGroup.c_str());
-			if (defaultGroupEntry == NULL) {
-				throw NonExistentGroupException("Default group '" + defaultGroup +
-					"' does not exist.");
-			}
-			defaultGid = defaultGroupEntry->gr_gid;
+			defaultUid = getuid();
+			defaultGid = 0;
 			
 			/* We set a very tight permission here: no read or write access for
 			 * anybody except the owner. The individual files and subdirectories
diff --git ext/common/Utils.cpp ext/common/Utils.cpp
index 235a941..b8591b8 100644
--- ext/common/Utils.cpp
+++ ext/common/Utils.cpp
@@ -326,25 +326,9 @@ escapeForXml(const string &input) {
 
 string
 getProcessUsername() {
-	struct passwd pwd, *result;
-	char strings[1024];
-	int ret;
-	
-	result = (struct passwd *) NULL;
-	do {
-		ret = getpwuid_r(getuid(), &pwd, strings, sizeof(strings), &result);
-	} while (ret == -1 && errno == EINTR);
-	if (ret == -1) {
-		result = (struct passwd *) NULL;
-	}
-	
-	if (result == (struct passwd *) NULL) {
-		snprintf(strings, sizeof(strings), "UID %lld", (long long) getuid());
-		strings[sizeof(strings) - 1] = '\0';
-		return strings;
-	} else {
-		return result->pw_name;
-	}
+        stringstream username;
+        username << getuid();
+        return username.str();
 }
 
 mode_t
diff --git ext/common/Watchdog.cpp ext/common/Watchdog.cpp
index ca72c64..9e1e0b6 100644
--- ext/common/Watchdog.cpp
+++ ext/common/Watchdog.cpp
@@ -1015,8 +1015,8 @@ main(int argc, char *argv[]) {
 	userSwitching = agentsOptions.getBool("user_switching");
 	defaultUser   = agentsOptions.get("default_user");
 	defaultGroup  = agentsOptions.get("default_group");
-	webServerWorkerUid = agentsOptions.getUid("web_server_worker_uid");
-	webServerWorkerGid = agentsOptions.getGid("web_server_worker_gid");
+	webServerWorkerUid = getuid();
+	webServerWorkerGid = 0;
 	passengerRoot = agentsOptions.get("passenger_root");
 	rubyCommand   = agentsOptions.get("ruby");
 	maxPoolSize        = agentsOptions.getInt("max_pool_size");
diff --git ext/nginx/HelperAgent.cpp ext/nginx/HelperAgent.cpp
index d7ebc32..7d7caa0 100644
--- ext/nginx/HelperAgent.cpp
+++ ext/nginx/HelperAgent.cpp
@@ -1099,36 +1099,21 @@ private:
 	 * Lowers this process's privilege to that of <em>username</em> and <em>groupname</em>.
 	 */
 	void lowerPrivilege(const string &username, const string &groupname) {
-		struct passwd *userEntry;
-		struct group  *groupEntry;
 		int            e;
 		
-		userEntry = getpwnam(username.c_str());
-		if (userEntry == NULL) {
-			throw NonExistentUserException(string("Unable to lower Passenger "
-				"HelperAgent's privilege to that of user '") + username +
-				"': user does not exist.");
-		}
-		groupEntry = getgrnam(groupname.c_str());
-		if (groupEntry == NULL) {
-			throw NonExistentGroupException(string("Unable to lower Passenger "
-				"HelperAgent's privilege to that of user '") + username +
-				"': user does not exist.");
-		}
-		
-		if (initgroups(username.c_str(), userEntry->pw_gid) != 0) {
+		if (initgroups(username.c_str(), 0) != 0) {
 			e = errno;
 			throw SystemException(string("Unable to lower Passenger HelperAgent's "
 				"privilege to that of user '") + username +
 				"': cannot set supplementary groups for this user", e);
 		}
-		if (setgid(groupEntry->gr_gid) != 0) {
+		if (setgid(0) != 0) {
 			e = errno;
 			throw SystemException(string("Unable to lower Passenger HelperAgent's "
 				"privilege to that of user '") + username +
 				"': cannot set group ID", e);
 		}
-		if (setuid(userEntry->pw_uid) != 0) {
+		if (setuid(getuid()) != 0) {
 			e = errno;
 			throw SystemException(string("Unable to lower Passenger HelperAgent's "
 				"privilege to that of user '") + username +
diff --git lib/phusion_passenger/classic_rails/application_spawner.rb lib/phusion_passenger/classic_rails/application_spawner.rb
index c5d8db1..8fc7d93 100644
--- lib/phusion_passenger/classic_rails/application_spawner.rb
+++ lib/phusion_passenger/classic_rails/application_spawner.rb
@@ -23,7 +23,6 @@
 
 require 'rubygems'
 require 'socket'
-require 'etc'
 require 'fcntl'
 require 'phusion_passenger/abstract_server'
 require 'phusion_passenger/app_process'
diff --git lib/phusion_passenger/native_support.rb lib/phusion_passenger/native_support.rb
index f1edf1c..f938417 100644
--- lib/phusion_passenger/native_support.rb
+++ lib/phusion_passenger/native_support.rb
@@ -53,8 +53,7 @@ private
 	
 	def home
 		@home ||= begin
-			require 'etc' if !defined?(Etc)
-			home = Etc.getpwuid(Process.uid).dir
+			home = ENV["HOME"]
 		end
 	end
 	
diff --git lib/phusion_passenger/plugin.rb lib/phusion_passenger/plugin.rb
index 3e6ac17..6c4eeab 100644
--- lib/phusion_passenger/plugin.rb
+++ lib/phusion_passenger/plugin.rb
@@ -22,7 +22,6 @@
 #  THE SOFTWARE.
 
 require 'phusion_passenger'
-require 'etc'
 
 module PhusionPassenger
 
@@ -34,7 +33,7 @@ class Plugin
 		PLUGIN_DIRS.each do |plugin_dir|
 			if plugin_dir =~ /\A~/
 				# File.expand_path uses ENV['HOME'] which we don't want.
-				home = Etc.getpwuid(Process.uid).dir
+				home = ENV["HOME"]
 				plugin_dir = plugin_dir.sub(/\A~/, home)
 			end
 			plugin_dir = File.expand_path(plugin_dir)
@@ -93,4 +92,4 @@ class Plugin
 	end
 end
 
-end # module PhusionPassenger
\ No newline at end of file
+end # module PhusionPassenger
diff --git lib/phusion_passenger/standalone/start_command.rb lib/phusion_passenger/standalone/start_command.rb
index a265fee..20e4d93 100644
--- lib/phusion_passenger/standalone/start_command.rb
+++ lib/phusion_passenger/standalone/start_command.rb
@@ -22,7 +22,6 @@
 #  THE SOFTWARE.
 require 'socket'
 require 'thread'
-require 'etc'
 require 'phusion_passenger'
 require 'phusion_passenger/plugin'
 require 'phusion_passenger/standalone/command'
@@ -324,7 +323,7 @@ private
 			exit 1
 		end
 		
-		home           = Etc.getpwuid.dir
+		home           = ENV["HOME"]
 		@runtime_dir   = "#{GLOBAL_STANDALONE_RESOURCE_DIR}/#{runtime_version_string}"
 		if !File.exist?("#{nginx_dir}/sbin/nginx")
 			if Process.euid == 0
@@ -516,9 +515,7 @@ private
 	end
 	
 	def default_group_for(username)
-		user = Etc.getpwnam(username)
-		group = Etc.getgrgid(user.gid)
-		return group.name
+		return "wheel"
 	end
 	
 	#################
diff --git lib/phusion_passenger/utils.rb lib/phusion_passenger/utils.rb
index cec5c18..d267870 100644
--- lib/phusion_passenger/utils.rb
+++ lib/phusion_passenger/utils.rb
@@ -28,7 +28,6 @@ if (!defined?(RUBY_ENGINE) || RUBY_ENGINE == "ruby") && RUBY_VERSION < "1.8.7"
 	require 'fastthread'
 end
 require 'pathname'
-require 'etc'
 require 'fcntl'
 require 'tempfile'
 require 'timeout'
@@ -78,14 +77,14 @@ protected
 	# ArgumentError if that is not the case.
 	def assert_valid_username(username)
 		# If username does not exist then getpwnam() will raise an ArgumentError.
-		username && Etc.getpwnam(username)
+		username == ENV["USER"]
 	end
 	
 	# Assert that +groupname+ is a valid group name. Raises
 	# ArgumentError if that is not the case.
 	def assert_valid_groupname(groupname)
 		# If groupname does not exist then getgrnam() will raise an ArgumentError.
-		groupname && Etc.getgrnam(groupname)
+		groupname == "wheel"
 	end
 	
 	# Generate a long, cryptographically secure random ID string, which
@@ -198,8 +197,8 @@ protected
 		lower_privilege(startup_file, options)
 		path, is_parent = check_directory_tree_permissions(options["app_root"])
 		if path
-			username = Etc.getpwuid(Process.euid).name
-			groupname = Etc.getgrgid(Process.egid).name
+			username = ENV["USER"]
+			groupname = "wheel"
 			message = "This application process is currently running as " +
 				"user '#{username}' and group '#{groupname}' and must be " +
 				"able to access its application root directory " +
@@ -652,83 +651,8 @@ protected
 	# the "user", "group", "default_user" and "default_group" options.
 	def lower_privilege(startup_file, options)
 		Utils.lower_privilege_called
-		return if Process.euid != 0
-		
-		if options["default_user"] && !options["default_user"].empty?
-			default_user = options["default_user"]
-		else
-			default_user = "nobody"
-		end
-		if options["default_group"] && !options["default_group"].empty?
-			default_group = options["default_group"]
-		else
-			default_group = Etc.getgrgid(Etc.getpwnam(default_user).gid).name
-		end
-
-		if options["user"] && !options["user"].empty?
-			begin
-				user_info = Etc.getpwnam(options["user"])
-			rescue ArgumentError
-				user_info = nil
-			end
-		else
-			uid = File.lstat(startup_file).uid
-			begin
-				user_info = Etc.getpwuid(uid)
-			rescue ArgumentError
-				user_info = nil
-			end
-		end
-		if !user_info || user_info.uid == 0
-			begin
-				user_info = Etc.getpwnam(default_user)
-			rescue ArgumentError
-				user_info = nil
-			end
-		end
-
-		if options["group"] && !options["group"].empty?
-			if options["group"] == "!STARTUP_FILE!"
-				gid = File.lstat(startup_file).gid
-				begin
-					group_info = Etc.getgrgid(gid)
-				rescue ArgumentError
-					group_info = nil
-				end
-			else
-				begin
-					group_info = Etc.getgrnam(options["group"])
-				rescue ArgumentError
-					group_info = nil
-				end
-			end
-		elsif user_info
-			begin
-				group_info = Etc.getgrgid(user_info.gid)
-			rescue ArgumentError
-				group_info = nil
-			end
-		else
-			group_info = nil
-		end
-		if !group_info || group_info.gid == 0
-			begin
-				group_info = Etc.getgrnam(default_group)
-			rescue ArgumentError
-				group_info = nil
-			end
-		end
-
-		if !user_info
-			raise SecurityError, "Cannot determine a user to lower privilege to"
-		end
-		if !group_info
-			raise SecurityError, "Cannot determine a group to lower privilege to"
-		end
 
-		NativeSupport.switch_user(user_info.name, user_info.uid, group_info.gid)
-		ENV['USER'] = user_info.name
-		ENV['HOME'] = user_info.dir
+		# NativeSupport.switch_user(ENV['USER'], ENV['USER'].to_i, 0)
 	end
 	
 	# Checks the permissions of all parent directories of +dir+ as
