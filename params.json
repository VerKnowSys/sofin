{"name":"Sofin","tagline":"SOftware INstaller. Designed for BSD, DARWIN and LINUX.","body":"## Author:\r\nDaniel (dmilith) Dettlaff (dmilith [at] verknowsys.com)\r\nI'm also on #freebsd and #scala.pl @ freenode IRC.\r\n\r\n\r\n## Definition authors:\r\n* Daniel (dmilith) Dettlaff\r\n* Michał (tallica) Lipski\r\n\r\n\r\n## Contributors:\r\n* Michał (tallica) Lipski\r\n\r\n\r\n## Thanks:\r\n* Tymon (teamon) Tobolski (ideas of improvments)\r\n\r\n\r\n## About:\r\nThis software is my way of how to get reliable, updatable, bundled, closed-dependency, secure and fully\r\ncustomizable software for FreeBSD servers. Darwin (Mac OS X) support started with version >=0.14.10. Linux support started with version >=0.24.4.\r\n\r\n\r\n## Features:\r\n* Designed to work on all *BSD, *Darwin, *Linux\r\n* User friendly, clean and clear colorful information. No magic. KISS, DRY, BDD driven development.\r\n* Simple, ~1k LOC solution, written in legacy /bin/sh shell scripting language.\r\n* Every \"software\" has own definition (\"def\" file) with defined flat dependency list and basic information.\r\n  Every definition is sh script itself (More in [skeleton.def](https://github.com/VerKnowSys/sofin/blob/master/definitions/skeleton.def.sample) and [defaults.def](https://github.com/VerKnowSys/sofin/blob/master/definitions/defaults.def))\r\n* Supports selective application installation or from list. (By \"install\" param. More in [examples](https://github.com/VerKnowSys/sofin#examples)).\r\n* Supports installation of user and system wide applications (more in [examples](https://github.com/VerKnowSys/sofin#examples)).\r\n* Has simple flat dependency managment. Sofin architecture is flexible enough to bundle almost any mix of requirements in application bundle, if only it's supported by given software. No need to install tons of useless/ not needed dependencies just because software supports it.\r\n* Has simple way of creating \"lists\" of definitions to build. Just create a text file with your definitions in \"lists/\" directory, create/update definitions snapshot (using sofin-make-defs) and give that list filename to sofin as parameter (more in [examples](https://github.com/VerKnowSys/sofin#examples)).\r\n* Software patches are supported out of the box. The only thing required is to put patches into \"definitions/patches/definition_file_name_without_def_extension/\" directory. Sofin will do the rest.\r\n* Software bundling. Every application is bundled separately with all dependencies in own root directory. The only external dependencies used by Sofin are those from base system. No other external dependencies allowed at all.\r\n* Uses definitions snapshots in \"tar.gz\" format, generated by \"sofin-make-defs\" script also available in this repository. Currently You need to manually put generated \"defs.tar.gz\" into remote repository (defined in MAIN_SOURCE_REPOSITORY variable).\r\n* Supports basic \"marking\" of status of installed applications/ dependencies to resume broken/ failed/ interrupted installation.\r\n* You may feel safe upgrading only *one* software bundle without headache of \"how it affects rest of my software\". No application bundle will affect any other. Ever.\r\n* Sofin is designed to not touch any part of system. The only exception is /etc/profile_sofin created after system wide software installation (/Software/) in ServeD system.\r\n* By default Sofin verbosity is limited to minimum. More detailed information is written to LOG file (located in /Software/.cache/install.log by default or /Users/USER_NAME/.cache/install.log)\r\n* Exports. Each app has own ROOT_DIR/exports/ with symlinks to exported software. Exported software are just simple symlinks used to generate PATH environment variable.\r\n* Sofin has own configuration file: [sofin.conf.sh](https://github.com/VerKnowSys/sofin/blob/master/sofin.conf.sh) which is SH script itself.\r\n* Supports parallel builds by default (from version 0.24.5)\r\n* Supports custom callbacks executed in order as follows:\r\n    `APP_AFTER_UNPACK_CALLBACK (executed after software unpack process)`\r\n    `APP_AFTER_PATCH_CALLBACK (executed after software patch process)`\r\n    `APP_AFTER_CONFIGURE_CALLBACK (executed after software configuration process)`\r\n    `APP_AFTER_MAKE_CALLBACK (executed after software compilation process)`\r\n    `APP_AFTER_INSTALL_CALLBACK (executed after software installation process)`\r\n  Each callback can be sh function itself and to be called by name. Look into [sbt.def](https://github.com/VerKnowSys/sofin/blob/master/definitions/sbt.def) for an example createLaunchScript().\r\n* Supports collisions between definitions through APP_CONFLICTS_WITH option since version 0.38.0. An example in [ruby.def](https://github.com/VerKnowSys/sofin/blob/master/definitions/ruby.def)\r\n\r\n\r\n## Examples:\r\n* Install all available software defined in a list called \"all\":\r\n    `sofin install all`\r\n\r\n* Install one software from definition called \"ruby.def\" for current user:\r\n    `sofin install ruby`\r\n\r\n* Install software list called \"databases\" for current user:\r\n    `sofin install databases`\r\n\r\n* Upgrade application requirement: Xml in bundle Ruby as current user:\r\n    `sofin upgrade libxml2 ruby`\r\n\r\n* Upgrade Ruby in Ruby bundle without recompiling all requirements (already compiled requirements will be reused):\r\n    `sofin upgrade ruby ruby`\r\n\r\n* Show list of available software:\r\n    `sofin available`\r\n\r\n* Show list of installed software:\r\n    `sofin fullinstalled` or `sofin installed`\r\n\r\n* Export \"ruby\" binary from \"Passenger\" bundle: `sofin export ruby Passenger`\r\n\r\n* Uninstall installed software \"SomeApp\"?\r\n    `sofin uninstall someApp`\r\n\r\n* Create a list called \"databases\", with definitions: \"postgresql\" and \"mysql\", and install it with Sofin:\r\n    `cd Sofin`\r\n    `echo \"postgresql\\nmysql\" > lists/databases`\r\n    run `./push-definitions` to create a snapshot and upload it to Your remote respository.\r\n    run `sofin install databases`\r\n\r\n\r\n## Differences from [POSIX](https://en.wikipedia.org/wiki/POSIX) and [FHS](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard) standards:\r\n* Sofin provides a slightly different approach to shell PATH variable. By default user PATH variable is overriden to include APP-PREFIX/exports instead of default APP-PREFIX/(s)bin. After each successful software installation sofin will populate APP-PREFIX/exports with relative symlinks to existing binaries of bundle. Application exports are defined in \"APP_EXPORTS\" variable (available for any definition).\r\n* Sofin suggests empty /usr/local folder. It's caused by POSIX \"shared nature\" of /usr/local. Sofin was built against this rule to prevent cross requirements between prefixes (/opt/X11 is an exception on Darwin), and to make sure that each software is easily movable between machines with same architecture.\r\n* Each application has own \"root\" directory (Similar to Mac OS X software in *.app folders).\r\n* Each software bundle includes all dependencies of given software, hence application bundle requires more disk\r\nspace than it does with \"old fasioned, system wide, shared software\".\r\n\r\n\r\n## Pitfalls/ Limitations:\r\n* Windows isn't supported, but Sofin will run just fine everywhere after a couple of configuration fights.\r\n* Sofin is designed, tested and heavy supported under both 64bit: FreeBSD 9.1 and Darwin 12.2.0, but it should also work on any compliant architectures as well.\r\n* Currently all official Sofin software used by current definitions is mirrored only on [software.verknowsys.com](http://software.verknowsys.com/source) and [software.verknowsys.com](http://software.verknowsys.com/binary).\r\n* Currently some definitions provided by Sofin include a couple of custom patches on software required by VerKnowSys ServeD © System. Patches (if any) usually come from current [FreeBSD ports](http://www.freebsd.org/ports/index.html).\r\n* Some definitions with X11 requirement will need [XQuartz](http://xquartz.macosforge.org/landing/) installation. (Darwin hosts only).\r\n\r\n\r\n## Installation info (platform specific):\r\n* FreeBSD specific:\r\n> 1.  Install base 64bit system - I used 64bit FreeBSD 9.1 bootonly iso here.\r\n> 2.  Run as root: \"fetch -o - https://github.com/VerKnowSys/sofin/archive/master.tar.gz | tar xf - && cd ./sofin-master && ./sofin-install\". It will put \"sofin\" into /usr/bin/ and sofin.conf.sh into /etc/.\r\n> 3.  Build core software. Run \"sofin install base\" as root.\r\n> 4.  Start using sofin as regular user.\r\n\r\n* Darwin/ Mac OS X specific:\r\n> 1.  Install Mac OS X 10.8.\r\n> 2.  Install [XQuartz](http://xquartz.macosforge.org/landing/) (if you want to build definitions that require X11)\r\n> 3.  Run \"git clone git://github.com/VerKnowSys/sofin.git && cd ./sofin && sudo ./sofin-install\". It will put \"sofin\" in /usr/bin/ and sofin.conf.sh in /etc/.\r\n> 4.  Build core software. Run \"sudo sofin install base\".\r\n> 5.  Start using sofin as regular user.\r\n\r\n* Debian specific: (Yes it's NOT Linux specific at all, cause every distro is a different monster with own set of additional hands and legs)\r\n> 1.  Install base 64bit system - I used 64bit Debian 6.0.x netinstall iso here.\r\n> 2.  To make base system \"complete\", run as root: \"aptitude install gcc g++ bc patch make file libssl-dev build-essential kernel-package libmagic-dev unzip\".\r\n> 3.  Run as root: \"wget -qO- https://github.com/VerKnowSys/sofin/archive/master.tar.gz | tar zxf - && cd ./sofin-master && ./sofin-install\". It will put \"sofin\" into /usr/bin/ and sofin.conf.sh into /etc/.\r\n> 4.  Build core software. Run as root: \"sofin install base\".\r\n> 5.  Start using sofin as regular user.\r\n\r\n\r\n## License:\r\n* Released under the [BSD](http://opensource.org/licenses/BSD-2-Clause) license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}