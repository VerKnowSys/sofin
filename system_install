#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin
unset LDFLAGS
unset CFLAGS
. ./config


check_command_result () {
    if [ -z "$1" ]; then
        echo "No param given for check_command_result()!"
        exit 0
    fi
    if [ "$1" = "0" ]; then
        echo "Ok."
    else
        echo "FAILURE."
        exit 0
    fi
}


run () {
    if [ ! -z "$1" ]; then
        echo "Running '$@' @ `$DATE_BIN`" >> $LOG
        eval $@ 1>> $LOG 2>> $LOG
        check_command_result $?
    else
        echo "Empty command to run?"
        exit 0
    fi
}


check_requirements () {
    if [ ! -e "$SOURCE_DIR" ]; then
        echo "No $SOURCE_DIR found! Creating dir tree.."
        mkdir -p "$SOURCE_DIR"
    fi
    if [ ! -e "$DEFINITIONS_DIR" ]; then
        echo "No definitions folder found. Creating one at: $DEFINITIONS_DIR"
        "$MKDIR_BIN" -p "$DEFINITIONS_DIR"
        echo "All definition files (*.def) should be placed there"
    fi
    if [ ! -e "$APPLICATIONS_NAME_LIST" ]; then
        echo "File: $APPLICATIONS_NAME_LIST undefined. This file tells which apps are 'bundles' to built."
        exit 0
    fi
    if [ "$APPLICATIONS" = "" ]; then
        echo "Empty applications list!"
        exit 0
    fi
}


echo "Loaded config"
echo "Application bundles defined for: $APPLICATIONS"
APPLICATIONS=`$CAT_BIN $APPLICATIONS_NAME_LIST`
check_requirements

for application in $APPLICATIONS; do
    for definition in "$DEFINITIONS_DIR/$application".def; do
        echo "Reading definition: $definition"
        . $definition
        if [ -z $APP_POSTFIX ]; then
            export PREFIX=$OPT_DIR$APP_NAME-$APP_VERSION
        else
            export PREFIX=$OPT_DIR$APP_NAME-$APP_VERSION-$APP_POSTFIX
        fi
        
        if [ -e $PREFIX ]; then
            echo "Application already installed: $PREFIX. Skipped."
        else
            execute_process () {
                if [ -z "$1" ]; then
                    echo "No param given for execute_process()!"
                    exit 0
                fi
                req_definition_file="$DEFINITIONS_DIR$1.def"
                echo "Checking requirement: $1 file: $req_definition_file"
                if [ ! -e $req_definition_file ]; then
                    echo "Definition file for requirement: $1 does not exists!"
                    exit 0
                fi
                . $req_definition_file
                BUILD_DIR="/tmp/$APP_NAME/"
                echo "Destroying, and Recreating build dir: $BUILD_DIR"
                $RM_BIN -rf "$BUILD_DIR"
                $MKDIR_BIN -p "$BUILD_DIR"
                CUR_DIR=`pwd`
                cd "$BUILD_DIR"
                echo "Fetching requirement source from: $APP_HTTP_PATH"
                run $FETCH_BIN $APP_HTTP_PATH
                echo "Unpacking source code of: $APP_NAME"
                run $TAR_BIN xf $BUILD_DIR$APP_NAME*
                echo "Entrering $BUILD_DIR$APP_NAME*" >> $LOG
                for dir in `$LS_BIN -F $BUILD_DIR | $GREP_BIN \/$`; do
                    echo "Changing dir to: $dir" >> $LOG
                    cd "$dir"
                    echo "Running requirement configure script for: $1 with args: --prefix=$PREFIX $APP_CONFIGURE_ARGS"
                    export CXXFLAGS="-I${PREFIX}/include $APP_COMPILER_ARGS"
                    export CFLAGS="-I${PREFIX}/include $APP_COMPILER_ARGS"
                    export LDFLAGS="-L${PREFIX}/lib $APP_LINKER_ARGS"
                    echo "CXXFLAGS: $CXXFLAGS"
                    echo "CFLAGS: $CFLAGS"
                    echo "LDFLAGS: $LDFLAGS"
                    run ./$APP_CONFIGURE_SCRIPT $APP_CONFIGURE_ARGS --prefix=$PREFIX
                    echo "Building requirement: $1"
                    run $APP_MAKE_METHOD -s
                    echo "Installing requirement: $1"
                    run $APP_INSTALL_METHOD -s
                    echo "Cleaning $build_dir$APP_NAME*"
                    $RM_BIN -rf $build_dir$APP_NAME*
                done
                cd $CUR_DIR
            }

            # check/build requirements (all definition requirements must be present/available):
            echo "App Requirements: $APP_REQUIREMENTS"
            for req in $APP_REQUIREMENTS; do
                echo "Configuring requirement: $req"
                execute_process $req
            done
            execute_process $application
        fi
    done
    
    echo "Job's done."
    exit 0
    
done
