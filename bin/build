#!/bin/sh
# @author: Daniel (dmilith) Dettlaff (dmilith at me dot com)


# load configuration from sofin.conf
. share/sofin/facts/paths.fact
. share/sofin/facts/paths-$(uname).fact
. share/sofin/facts/system.fact
. share/sofin/facts/shell.fact
. share/sofin/facts/sofin.fact

# loading funs
. share/sofin/funs/core.fun
. share/sofin/funs/commons.fun


# choose C compiler, if any
export CXX="/usr/bin/g++"
if [ -x "/usr/bin/clang++" ]; then
    export CXX="/usr/bin/clang++"
fi
if [ -x "/usr/pkg/bin/clang++" ]; then
    export CXX="/usr/pkg/bin/clang++"
fi
if [ ! -x "${CXX}" ]; then
    error "C++ compiler is required to compile Sofin utilities"
fi

shell_configuration=$(${CAT_BIN} <<EOF
if [ -e \$HOME/.profile ]; then
    source \$HOME/.profile
fi
trap "source \$HOME/.profile" USR2
export SHELL_PID="\$\$"
EOF
)


update_env_files () {
    env_files="/etc/zshenv /etc/bashrc /etc/profile"
    for i in ${env_files}; do
        if [ -f "${i}" ]; then
            ${GREP_BIN} -q "SHELL_PID" "${i}" >/dev/null 2>&1
            if [ "$?" = "0" ]; then
                continue
            else
                note "Updating environment file: ${i}"
                echo "${shell_configuration}" >> "${i}"
                check_command_result $?
            fi
        else
            note "Creating environment file: ${i}"
            echo "${shell_configuration}" >> "${i}"
            check_command_result $?
        fi
    done
}


install_base () {
    build_natives
    if [ "${INSTALL}" = "YES" ]; then
        if [ "$(${ID_BIN} -u)" = "0" ]; then
            ${RM_BIN} -fv "${PREFIX}usr/bin/s" && \
            ${RM_BIN} -fv "${PREFIX}usr/bin/sofin" && \
            ${RM_BIN} -fv "${PREFIX}usr/bin/sofin-version-utility" && \
            ${RM_BIN} -fv "${PREFIX}usr/bin/sofin-microseconds" && \
            note "Preinstallation cleanup completed"
        fi
        install_sofin
    fi
}


build_natives () {
    note "Building native helpers"
    if [ -x "${CXX}" ]; then
        debug "C++ compiler available. Using: $(distinct n ${CXX})"
        ${CXX} ${DEFAULT_COMPILER_FLAGS} -o bin/sofin-microseconds src/sofin_microseconds.cc && \
        note "$(distinct n "bin/sofin-microseconds") has been successfully built" && \
        ${CXX} ${DEFAULT_COMPILER_FLAGS} -o bin/sofin-version-utility src/sofin-version-utility.cc && \
        note "$(distinct n "bin/sofin-version-utility") has been successfully built" && \
        return
        error "Failed to build native helpers!"
    else
        error "C++ compiler is required to continue"
    fi
}


install_sofin () {
    if [ ! -z "${PREFIX}" ]; then
        for a_path in "${PREFIX}" "${PREFIX}etc" "${PREFIX}usr/bin"; do
            ${MKDIR_BIN} -p "${a_path}" || error "Privileges sanity check failure!\
No owner privileges for current user: $(distinct e ${USER}), found for path: $(distinct e ${a_path})\
Sofin requires read + write access for that path"
        done
    else
        PREFIX="/"
    fi
    note "Installing: $(distinct n Sof)tware $(distinct n In)staller, version: $(distinct n "${SOFIN_VERSION}") to prefix: $(distinct n ${PREFIX})" && \
    note "$(distinct n $(${CP_BIN} -fR "share/sofin" "${PREFIX}usr/share/" && echo "install: share/sofin/* -> ${PREFIX}usr/share/sofin"))" && \
    note "$(distinct n $(${INSTALL_BIN} "bin/sofin-version-utility" "${PREFIX}usr/bin"))" && \
    note "$(distinct n $(${INSTALL_BIN} "bin/sofin-microseconds" "${PREFIX}usr/bin"))" && \
    note "$(distinct n $(${INSTALL_BIN} "src/sofin.sh" "${PREFIX}usr/bin/s"))" && \
    note "Type: $(distinct n "s usage") for help." && \
    note "Read: $(distinct n "https://bitbucket.org/verknowsys/sofin") for more details." && \
    ${SED_BIN} -i '' -e "s#OS_TYPE#$(uname)#" ${PREFIX}usr/share/sofin/loader 2>/dev/null && \
    return
    if [ "Linux" != "${SYSTEM_NAME}" ]; then
        error "Sofin installation failed!"
    fi
}
