#!/bin/sh
# @author: Daniel (dmilith) Dettlaff (dmilith@verknowsys.com)


# load configuration from sofin.conf
CONF_FILE="./sofin.conf.sh"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
    note "Validating environment"
    validate_env
else
    echo "FATAL: No configuration file found: ${CONF_FILE}"
    exit 1
fi

# choose C compiler, if any
export CXX="/usr/bin/g++"
if [ -x "/usr/bin/clang++" ]; then
    export CXX="/usr/bin/clang++"
fi
if [ ! -x "${CXX}" ]; then
    error "C++ compiler is required to install Sofin"
    exit 1
fi


shell_configuration=$(${CAT_BIN} <<EOF
if [ "\$(${ID_BIN} -u)" = "0" ]; then
    if [ -e "/etc/profile_sofin" ]; then
        . /etc/profile_sofin
    fi
    trap "source /etc/profile_sofin" USR2
else
    if [ -e \$HOME/.profile ]; then
        . \$HOME/.profile
    fi
    trap "source \$HOME/.profile" USR2
fi
export SHELL_PID="\$\$"
EOF
)


update_env_files () {
    env_files="/etc/zshenv /etc/bashrc /etc/profile"
    for i in ${env_files}; do
        if [ -f "${i}" ]; then
            ${GREP_BIN} -q "SHELL_PID" "${i}"
            if [ $? -eq 0 ]; then
                continue
            else
                note "Updating environment file: ${i}"
                echo "${shell_configuration}" >> "${i}"
                check_command_result $?
            fi
        else
            note "Creating environment file: ${i}"
            echo "${shell_configuration}" >> "${i}"
            check_command_result $?
        fi
    done
}


# create_user_symlinks () {
#     if [ ! -d "${HOME_DIR}" ]; then
#         note "Creating ${HOME_DIR} directory."
#         ${MKDIR_BIN} "${HOME_DIR}"
#         check_command_result $?
#     fi

#     CWD="$(pwd)"
#     cd /home

#     for i in *; do
#         uid="$(id -u $i 2>/dev/null)"
#         if [ ! $uid ]; then
#             continue
#         fi
#         if [ ! -L "${HOME_DIR}${uid}" ]; then
#             note "Creating symlink ${HOME_DIR}${uid} -> /home/${i}."
#             ${LN_BIN} -s "/home/${i}" "${HOME_DIR}${uid}"
#             check_command_result $?
#         fi
#     done

#     cd "${CWD}"
# }


install_base () {
    ${RM_BIN} -rf "./sofin-rpp"
    ${RM_BIN} -rf "/usr/bin/sofin"
    ${RM_BIN} -rf "/usr/bin/sofin.sh"
    ${RM_BIN} -rf "/usr/bin/sofin-rpp"
    ${RM_BIN} -rf "/usr/bin/sofin-version-utility"
    ${RM_BIN} -rf "/etc/${CONF_FILE}"

    build_launcher
    install_sofin

    ${MKDIR_BIN} -p /Software/.cache
}


build_launcher () {
    if [ -x "${CXX}" ]; then
        note "C++ compiler available. Using: ${CXX}"
        note "Building launcher"
        ${CXX} -Os -fPIC ./launcher.cc -o sofin
        check_command_result $?

        note "Building patcher"
        ${CXX} -Os -fPIC ./sofin-rpath-patcher.cc -o sofin-rpp
        check_command_result $?

        note "Building version utility"
        ${CXX} -Os -fPIC ./sofin-version-utility.cc -o sofin-version-utility
        check_command_result $?
    else
        error "C++ compiler is required to continue"
        exit 1
    fi
}


install_sofin () {
    ${CP_BIN} "$($PWD_BIN)/${CONF_FILE}" "/etc/${CONF_FILE}"
    check_command_result $?
    ${CP_BIN} "$($PWD_BIN)/sofin" /usr/bin/sofin
    check_command_result $?
    ${CP_BIN} "$($PWD_BIN)/sofin-rpp" /usr/bin/sofin-rpp
    check_command_result $?
    ${CP_BIN} "$($PWD_BIN)/sofin-version-utility" /usr/bin/sofin-version-utility
    check_command_result $?
    ${CP_BIN} "$($PWD_BIN)/sofin.sh" /usr/bin/sofin.sh
    check_command_result $?
}


check_root
update_env_files
install_base
sofin_version=$(${CAT_BIN} ./sofin.sh | ${GREP_BIN} VERSION= | ${AWK_BIN} '{print $2}')
note "Sofin installed on: ${SYSTEM_NAME} $(/usr/bin/sofin-version-utility) with ${sofin_version}"

if [ ! -f "/Software/.cache/definitions/defaults.def" ]; then
    note "Performing initial definitions update."
    /usr/bin/sofin update
fi
