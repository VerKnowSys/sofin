#!/bin/sh
# @author: Daniel (dmilith) Dettlaff (dmilith@verknowsys.com)


# load configuration from sofin.conf
CONF_FILE="./sofin.conf.sh"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
    note "Validating environment"
    validate_env
else
    echo "FATAL: No configuration file found: ${CONF_FILE}"
    exit 1
fi

# choose C compiler, if any
export CXX="/usr/bin/g++"
if [ -x "/usr/bin/clang++" ]; then
    export CXX="/usr/bin/clang++"
fi
if [ ! -x "${CXX}" ]; then
    warn "C++ compiler unavailable. Wrapper wont be built"
fi


shell_configuration=$(${CAT_BIN} <<EOF
if [ "\$(${ID_BIN} -u)" = "0" ]; then
    trap "source /etc/profile_sofin" USR2
else
    if [ -e \$HOME/.profile ]; then
        . \$HOME/.profile
    fi
    trap "source \$HOME/.profile" USR2
fi
export SHELL_PID="\$\$"
EOF
)


update_env_files () {
    env_files=( ${!1} )
    env_file=""
    for i in ${env_files[@]}; do
        if [ -f "${i}" ]; then
            ${GREP_BIN} -q "SHELL_PID" "${i}"
            if [ $? -eq 0 ]; then
                export env_file=""
                break
            elif [ "${env_file}" = "" ]; then
                export env_file="${i}"
            fi
        fi
    done
    if [ -f "${env_file}" ]; then
        note "Updating environment file: ${env_file}"
        echo "${shell_configuration}" >> "${env_file}"
        check_command_result $?
    fi
}


update_env () {
    zsh_files=( "/etc/zsh/zshenv" "/etc/zsh/zshrc" "/etc/zshenv" "/etc/zshrc" )
    bash_files=( "/etc/bash/bashrc" "/etc/bashrc" )
    sh_files=( "/etc/profile" )
    update_env_files zsh_files[@]
    update_env_files bash_files[@]
    update_env_files sh_files[@]
}


create_user_symlinks () {
    if [ ! -d "${HOME_DIR}" ]; then
        note "Creating ${HOME_DIR} directory."
        ${MKDIR_BIN} "${HOME_DIR}"
        check_command_result $?
    fi

    CWD="$(pwd)"
    cd /home

    for i in *; do
        uid="$(id -u $i 2>/dev/null)"
        if [ ! $uid ]; then
            continue
        fi
        if [ ! -L "${HOME_DIR}${uid}" ]; then
            note "Creating symlink ${HOME_DIR}${uid} -> /home/${i}."
            ${LN_BIN} -s "/home/${i}" "${HOME_DIR}${uid}"
            check_command_result $?
        fi
    done

    cd "${CWD}"
}


install_base () {
    ${RM_BIN} -rf "./sofin"
    ${RM_BIN} -rf "./sofin.sh.x"
    ${RM_BIN} -rf "/usr/bin/sofin"
    ${RM_BIN} -rf "/usr/bin/sofin.sh"
    ${RM_BIN} -rf "/etc/${CONF_FILE}"

    build_launcher

    if [ ! -x "$($PWD_BIN)/sofin" ]; then
        # no compiler available in system, using plain script
        ${CP_BIN} "$($PWD_BIN)/sofin.sh" /usr/bin/sofin
        check_command_result $?
    else
        # compiler available, build was done
        ${CP_BIN} "$($PWD_BIN)/sofin" /usr/bin/sofin
        SHC_BIN="$(which shc)"
        if [ "${SHC_BIN}" = "" ]; then
            note "SHC compiler unavailable"
            ${CP_BIN} "$($PWD_BIN)/sofin.sh" /usr/bin/sofin.sh
            check_command_result $?
        else
            note "SHC compiler available"
            ${SHC_BIN} -T -f "$($PWD_BIN)/sofin.sh"
            check_command_result $?
            chmod 755 "$($PWD_BIN)/sofin.sh.x"
            ${CP_BIN} "$($PWD_BIN)/sofin.sh.x" /usr/bin/sofin.sh
            check_command_result $?
        fi
    fi

    ${CP_BIN} "$($PWD_BIN)/${CONF_FILE}" "/etc/${CONF_FILE}"
    check_command_result $?

    ${MKDIR_BIN} -p /Software/.cache
    note "Installation succeeded."
}


build_launcher () {
    if [ -x "${CXX}" ]; then
        note "C++ compiler available. Using: ${CXX}"
        ${CXX} -Os -fPIC ./launcher.cc -o sofin
    else
        note "No C++ compiler available"
    fi
}


note "${SYSTEM_NAME} installation"
case "${SYSTEM_NAME}" in

  Darwin)
    if [ ! -e "${HOME}/.profile" ]; then
      ${LN_BIN} -s "/Users/$(${ID_BIN} -u)/.profile" "${HOME}/.profile"
      check_command_result $?
    fi
    update_env
    install_base
    ;;

  FreeBSD|Linux)
    check_root
    create_user_symlinks
    update_env
    install_base
    ;;

  *)
    echo "No supported architecture found"
    ;;

esac
