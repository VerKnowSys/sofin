#!/bin/sh
# @author: Daniel (dmilith) Dettlaff (dmilith@verknowsys.com)

# config settings
VERSION="0.16"


# load configuration from sofin.conf
CONF_FILE="/etc/sofin.conf"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
else
    echo "FATAL: No configuration file found: ${CONF_FILE}"
    exit 1
fi


# helpers

cecho () {
    ${PRINTF_BIN} "${2}${1}${reset}\n"
}


debug () {
    if [ "${DEBUG}" = "true" ]; then
        cecho " ~ $1" ${magenta}
    else
        cecho " ~ $1" ${magenta} >> ${LOG}
    fi
}


warn () {
    cecho " ! $1" ${yellow}
}


note () {
    cecho " * $1" ${green}
}


error () {
    cecho " # $1" ${red}
}


check_command_result () {
    if [ -z "$1" ]; then
        error "No param given for check_command_result()!"
        exit_locked 1
    fi
    if [ "$1" = "0" ]; then
        debug "CORRECT"
    else
        error
        error "FAILURE. Run $(${BASENAME_BIN} ${SCRIPT_NAME}) log to see what went wrong."
        exit_locked 1
    fi
}


check_definition_dir () {
    if [ ! -d "${SOFTWARE_DIR}" ]; then
        note "No ${SOFTWARE_DIR} found. Creating one."
        "${MKDIR_BIN}" -p "${SOFTWARE_DIR}"
    fi
    if [ ! -d "${CACHE_DIR}" ]; then
        note "No cache folder found. Creating one at: ${CACHE_DIR}"
        "${MKDIR_BIN}" -p "${CACHE_DIR}"
    fi
}


check_requirements () {
    if [ "${APPLICATIONS}" = "" ]; then
        error "Empty applications list!"
        exit_locked 1
    fi
    files="$(${FIND_BIN} /usr/local -type f | ${WC_BIN} -l | ${SED_BIN} -e 's/^ *//g;s/ *$//g' )"
    if [ "${files}" != "0" ]; then
        warn "/usr/local has been found, and contains ${files} file(s)"
    fi
}


update_definitions () { # accepts optional user uid param
    if [ "${DEVEL}" != "" ]; then
        warn "Devel mode enabled. Not updating definitions from repository: ${MAIN_SOURCE_REPOSITORY}"
        return
    fi
    tar_options="xf"
    rm_options="-rf"
    if [ "${DEBUG}" = "true" ]; then
        tar_options="${tar_options}v"
        rm_options="${rm_options}v"
    fi
    debug "Checking for destination directories existance…"
    for element in "${LISTS_DIR}" "${DEFINITIONS_DIR}"; do
        ${MKDIR_BIN} -p "${element}" > /dev/null
        if [ ! -z "${1}" ]; then # param with uid not given
            ${TOUCH_BIN} ${LOG}
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                if [ ! -z "${1}" ]; then
                    debug "Chowning ${element} for user: ${1}"
                    ${CHOWN_BIN} -R ${1} "${element}" >> ${LOG}
                fi
            fi
        fi
        debug "Removing old definitions: ${element}"
        ${RM_BIN} ${rm_options} ${element} >> ${LOG}
    done
    cd "${CACHE_DIR}"
    debug "Working in cache dir: ${CACHE_DIR}"
    note "Updating definitions snapshot from: ${MAIN_SOURCE_REPOSITORY}definitions/${DEFINITION_SNAPSHOT_FILE}"
    ${FETCH_BIN} "${MAIN_SOURCE_REPOSITORY}definitions/${DEFINITION_SNAPSHOT_FILE}" >> "${LOG}" 2>> "${LOG}"
    ${TAR_BIN} ${tar_options} "${DEFINITION_SNAPSHOT_FILE}" >> "${LOG}" 2>> "${LOG}"
    if [ "$(${ID_BIN} -u)" = "0" ]; then
        if [ ! -z "${1}" ]; then
            debug "Chowning definitions for user: ${1}"
            ${CHOWN_BIN} -R ${1} "${CACHE_DIR}" >> ${LOG}
        fi
    fi
}


write_info_about_shell_configuration () {
    note
    warn "You'll need to restart Your shell before using installed software in order to update environment variables."
    warn "To get this done automatically, put these lines to Your /etc/zshrc :"
    ${PRINTF_BIN} "if [ \"\$\(/usr/bin/id -u\)\" = \"0\" ]; then\n"
    ${PRINTF_BIN} "    trap \"source /etc/profile_sofin\" USR2\n"
    ${PRINTF_BIN} "else\n"
    ${PRINTF_BIN} "    if [ -e \$HOME/.profile ]; then\n"
    ${PRINTF_BIN} "        . \$HOME/.profile\n"
    ${PRINTF_BIN} "    fi\n"
    ${PRINTF_BIN} "    trap \"source \$HOME/.profile\" USR2\n"
    ${PRINTF_BIN} "fi\n"
    ${PRINTF_BIN} "export SHELL_PID=\"\$\$\"\n"
}


usage_howto () {
    note "Built in tasks:"
    note
    note "install | add                        - installs software from list (example: $(${BASENAME_BIN} ${SCRIPT_NAME}) install languages)"
    note "upgrade                              - upgrades one of dependencies of installed definition (example: $(${BASENAME_BIN} ${SCRIPT_NAME}) upgrade iconv ruby - to upgrade iconv in Ruby bundle)"
    note "dependencies | deps | local          - installs software from list defined in '${DEPENDENCIES_FILE}' file in current directory"
    note "one | cherrypick | get               - installs one application from definition (example: $(${BASENAME_BIN} ${SCRIPT_NAME}) get ruby)"
    note "uninstall | remove | delete          - removes one application (example: $(${BASENAME_BIN} ${SCRIPT_NAME}) uninstall ruby)"
    note "list | installed                     - lists installed software"
    note "available                            - lists available software"
    note "export | exp | exportapp             - adds given command to application exports (example: $(${BASENAME_BIN} ${SCRIPT_NAME}) export rails ruby)"
    note "getshellvars | shellvars | vars      - returns shell variables for installed software"
    note "log                                  - shows and watches log file (for debug messages and verbose info)"
    note "reload | rehash                      - recreate shell vars and reload current shell"
    note "update                               - only update definitions from remote repository and exit"
    note "ver | version                        - shows $(${BASENAME_BIN} ${SCRIPT_NAME}) script version"
    exit
}


check_root () {
    if [ ! "$(${ID_BIN} -u)" = "0" ]; then
        error "This command should be run as root."
        exit
    fi
}


check_os () {
    case "$(${UNAME_BIN})" in
        FreeBSD)
            # note "Running on FreeBSD host"
            ;;

        Darwin)
            # note "Running on OSX/Darwin host"
            ;;

        *)
            error "Currently only FreeBSD and Darwin hosts are supported."
            exit
            ;;

    esac
}


check_lock () {
    userUID="$1"
    if [ -z "${userUID}" ]; then
        userUID="0"
    fi
    if [ ! "${userUID}" = "0" ]; then
        export LOCK_FILE="${HOME_DIR}${userUID}/.sofin.lock"
    fi
    if [ -e "${LOCK_FILE}" ]; then
        error "Lock file exists in ${LOCK_FILE}. Another process of $(${BASENAME_BIN} ${SCRIPT_NAME}) is running?"
        exit 1
    else
        debug "Creating lock file ${LOCK_FILE}"
        ${TOUCH_BIN} ${LOCK_FILE}
    fi
    trap "exit_locked 2" INT
}


exit_locked () {
    ERRCODE="$1"
    if [ -z ${ERRCODE} ]; then
        ERRCODE="0"
    fi
    if [ "${ERRCODE}" = "2" ]; then
        warn "Interrupted by user."
    fi
    if [ -e "${LOCK_FILE}" ]; then
        debug "Removing lock file: ${LOCK_FILE}"
        ${RM_BIN} -f ${LOCK_FILE}
    fi
    exit ${ERRCODE}
}


update_shell_vars () {
    USER_UID="$(${ID_BIN} ${ID_SVD})"
    if [ "$(${ID_BIN} -u)" = "0" ]; then
        note "Updating ${SOFIN_PROFILE} settings…"
        ${PRINTF_BIN} "$(${SCRIPT_NAME} getshellvars)" > ${SOFIN_PROFILE}
    else
        note "Updating ${HOME_DIR}${USER_UID}/.profile settings…"
        ${PRINTF_BIN} "$(${SCRIPT_NAME} getshellvars ${USER_UID})" > ${HOME_DIR}${USER_UID}/.profile
    fi
}


# first part of checks
check_os
check_definition_dir


# unset conflicting environment variables
unset LDFLAGS
unset CFLAGS
unset CXXFLAGS
unset CPPFLAGS
unset PATH
unset LD_LIBRARY_PATH
unset LD_PRELOAD
unset DYLD_LIBRARY_PATH
unset PKG_CONFIG_PATH


if [ ! "$1" = "" ]; then
    case $1 in


    ver|version)
        note "${HEADER}"
        note "2o11-2o12 by Daniel (dmilith) Dettlaff - dmililth [at] me.com"
        exit
        ;;


    log)
        if [ -z "${2}" ]; then
            export LOG="${HOME_DIR}$(${ID_BIN} ${ID_SVD})/install.log"
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                check_root
                export LOG="${CACHE_DIR}install.log"
            fi
        else
            export LOG="${HOME_DIR}${2}/install.log"
            if [ ! "$(${ID_BIN} ${ID_SVD})" = "${2}" ]; then
                check_root
            fi
        fi
        ${TAIL_BIN} -n ${LOG_LINES_AMOUNT} -F ${LOG}
        ;;


    installed|list)
        if [ -z "${2}" ]; then
            export SOFT_DIR="${HOME_DIR}$(${ID_BIN} ${ID_SVD})/${HOME_APPS_DIR}"
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                check_root
                export SOFT_DIR="${SOFTWARE_DIR}"
            fi
        else
            export SOFT_DIR="${HOME_DIR}$2/${HOME_APPS_DIR}"
            if [ ! "$(${ID_BIN} ${ID_SVD})" = "${2}" ]; then
                check_root
            fi
        fi
        note "Installed applications:"
        note
        if [ -d ${SOFT_DIR} ]; then
            for app in ${SOFT_DIR}*; do
                note "$(${BASENAME_BIN} ${app}):"
                for req in $(${FIND_BIN} ${app} -maxdepth 1 -name *${INSTALLED_MARK} | ${SORT_BIN}); do
                    note "-> $(${BASENAME_BIN} ${req}) version: $(${CAT_BIN} ${req})"
                done
                note
            done
        fi
        exit
        ;;


    getshellvars|shellvars|vars)

        # PATH:
        result="${DEFAULT_PATH}"
        process () {
            for app in ${1}*; do # SOFT_DIR
                exp="${app}/exports"
                if [ -e "${exp}" ]; then
                    result="${exp}:${result}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}${2}/${HOME_APPS_DIR}
        fi
        ${PRINTF_BIN} "# PATH:\n"
        ${PRINTF_BIN} "export PATH=${result}\n\n"

        # LD_LIBRARY_PATH, LDFLAGS, PKG_CONFIG_PATH:
        ldresult="/lib:/usr/lib"
        pkg_config_path="."
        ldflags="${LDFLAGS} ${DEFAULT_LDFLAGS}"
        process () {
            for lib in ${1}*; do # LIB_DIR
                if [ -e "${lib}/lib" ]; then
                    ldresult="${lib}/lib:${ldresult}"
                    ldflags="-R${lib}/lib -L${lib}/lib ${ldflags}"
                fi
                if [ -e "${lib}/libexec" ]; then
                    ldresult="${lib}/libexec:${ldresult}"
                    ldflags="-R${lib}/libexec -L${lib}/libexec ${ldflags}"
                fi
                if [ -e "${lib}/pkgconfig" ]; then
                    pkg_config_path="${lib}/pkgconfig:${pkg_config_path}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}$2/${HOME_APPS_DIR}
        fi
        ${PRINTF_BIN} "# LD_LIBRARY_PATH:\n"
        ${PRINTF_BIN} "export LD_LIBRARY_PATH='${ldresult}'\n\n"
        ${PRINTF_BIN} "# LDFLAGS:\n"
        ${PRINTF_BIN} "export LDFLAGS='${ldflags}'\n\n"
        ${PRINTF_BIN} "# PKG_CONFIG_PATH:\n"
        if [ "$($UNAME_BIN)" = "Darwin" ]; then
            ${PRINTF_BIN} "export PKG_CONFIG_PATH='${pkg_config_path}:/opt/X11/lib/pkgconfig'\n\n"
            ${PRINTF_BIN} "export DYLD_LIBRARY_PATH='${ldresult}:/opt/X11/lib'\n\n"
        else
            ${PRINTF_BIN} "export PKG_CONFIG_PATH='${pkg_config_path}'\n\n"
        fi

        # CFLAGS, CXXFLAGS:
        cflags="${CFLAGS} -fPIC ${DEFAULT_COMPILER_FLAGS}"
        process () {
            for app in ${1}*; do # SOFT_DIR
                exp="${app}/include"
                if [ -e "${exp}" ]; then
                    cflags="-I${exp} ${cflags}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}${2}/${HOME_APPS_DIR}
        fi
        cxxflags="${cflags}"
        ${PRINTF_BIN} "# CFLAGS:\n"
        ${PRINTF_BIN} "export CFLAGS='${cflags}'\n\n"
        ${PRINTF_BIN} "# CXXFLAGS:\n"
        ${PRINTF_BIN} "export CXXFLAGS='${cxxflags}'\n\n"

        # MANPATH
        manpath="${DEFAULT_MANPATH}"
        process () {
            for app in ${1}*; do # SOFT_DIR
                exp="${app}/man"
                if [ -e "${exp}" ]; then
                    manpath="${exp}:${manpath}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}${2}/${HOME_APPS_DIR}
        fi
        ${PRINTF_BIN} "# MANPATH:\n"
        ${PRINTF_BIN} "export MANPATH='${manpath}'\n\n"

        ${PRINTF_BIN} "# CC:\n"
        ${PRINTF_BIN} "export CC='/usr/bin/clang'\n\n"
        ${PRINTF_BIN} "# CXX:\n"
        ${PRINTF_BIN} "export CXX='/usr/bin/clang++'\n\n"
        exit
        ;;


    upgrade)
        if [ "$2" = "" ]; then
            error "For application \"$1\", second argument with application requirement name is required!"
            exit 1
        fi
        if [ "$3" = "" ]; then
            error "For application \"$1\", third argument with application name is required!"
            exit 1
        fi
        if [ -z "${4}" ]; then
            export USER_UID="$(${ID_BIN} ${ID_SVD})"
        else
            export USER_UID="$4"
        fi
        if [ "$(${ID_BIN} -u)" = "0" ]; then
            export SOFT_DIR="${SOFTWARE_DIR}"
        else
            export SOFT_DIR="${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}"
            export LOG="${HOME_DIR}${USER_UID}/install.log"
        fi
        REQ="${2}"
        APP="$(${PRINTF_BIN} "${3}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(${PRINTF_BIN} "${3}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        if [ ! -e "${SOFT_DIR}${APP}" ]; then
            error "Bundle not found: ${APP}"
            exit 1
        fi
        note "Performing upgrade of requirement: ${REQ} in application bundle: ${APP}"
        REM="${SOFT_DIR}${APP}/${REQ}${INSTALLED_MARK}"
        if [ ! -e "${REM}" ]; then
            error "No requirement: ${REM} found of bundle: ${APP}"
            exit 1
        fi

        # getting list of file/ folders matching definition name
        files=""
        debug "Performing find in ${SOFT_DIR}${APP}"
        for old in $(${FIND_BIN} "${SOFT_DIR}${APP}" -name "*${REQ}*" -regex '.*\.[o\$\|so\|a\$\|la\$\|h\$\|hpp\$].*' -type f); do
            files="${files}${old} "
            ${RM_BIN} -f "${old}"
        done
        debug "Old files removed before doing upgrade: ${files}"
        debug "Removing install marker: ${REM}"
        ${RM_BIN} -f "${REM}"

        debug "Relaunching installation script once again…"
        ${SCRIPT_NAME} one ${3} ${USER_UID}
        exit
        ;;


    cherrypick|one|getone|get)
        if [ "$2" = "" ]; then
            error "For \"$1\" application installation mode, second argument with application definition name is required!"
            exit 1
        fi
        if [ -z "${3}" ]; then
            export USER_UID="$(${ID_BIN} ${ID_SVD})"
        else
            export USER_UID="$3"
        fi
        if [ ! "$(${ID_BIN} ${ID_SVD})" = "${USER_UID}" ]; then
            check_root
        fi
        if [ "$(${ID_BIN} -u)" = "0" ]; then
            unset USER_UID
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        check_lock ${USER_UID}
        update_definitions ${USER_UID}
        APP="$(${PRINTF_BIN} "${2}" | ${CUT_BIN} -c1 | ${TR_BIN} '[A-Z]' '[a-z]')$(${PRINTF_BIN} "${2}" | ${SED_BIN} 's/^[A-Za-z]//')"
        if [ ! -e "${DEFINITIONS_DIR}${APP}.def" ]; then
            error "Definition file not found: ${DEFINITIONS_DIR}${APP}.def !"
            exit_locked 1
        fi
        export APPLICATIONS="${APP}"
        note "Installing software: ${APPLICATIONS}"
        ;;


    deps|dependencies|local)
        LOCAL_DIR="$(${PWD_BIN})/"
        export USER_UID="$(${ID_BIN} ${ID_SVD})"
        if [ "$(${ID_BIN} -u)" = "0" ]; then
            error "Installation of project dependencies cannot be run as root!"
            exit 1
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        check_lock ${USER_UID}
        update_definitions ${USER_UID}
        cd "${LOCAL_DIR}"
        note "Looking for $(${PWD_BIN})/${DEPENDENCIES_FILE} file…"
        if [ ! -e "$(${PWD_BIN})/${DEPENDENCIES_FILE}" ]; then
            error "Dependencies file not found!"
            exit_locked 1
        fi
        export APPLICATIONS="$(${CAT_BIN} ${LOCAL_DIR}${DEPENDENCIES_FILE} | ${TR_BIN} '\n' ' ')"
        note "Installing dependencies: ${APPLICATIONS}"
        ;;


    install|add)
        if [ "$2" = "" ]; then
            error "For \"$1\" application installation mode, second argument with application list is required!"
            exit 1
        fi
        if [ -z "${3}" ]; then
            export USER_UID="$(${ID_BIN} ${ID_SVD})"
        else
            export USER_UID="$3"
        fi
        if [ ! "$(${ID_BIN} ${ID_SVD})" = "${USER_UID}" ]; then
            check_root
        fi
        if [ "$(${ID_BIN} -u)" = "0" ]; then
            unset USER_UID
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        check_lock ${USER_UID}
        update_definitions ${USER_UID}
        if [ ! -e "${LISTS_DIR}$2" ]; then
            error "List not found: ${2}!"
            exit_locked 1
        fi
        export APPLICATIONS="$(${CAT_BIN} ${LISTS_DIR}$2 | ${TR_BIN} '\n' ' ')"
        note "Installing software: ${APPLICATIONS}"
        ;;


    delete|remove|uninstall)
        if [ "$2" = "" ]; then
            error "For \"$1\" task, second argument with application name is required!"
            exit 1
        fi
        if [ -z "${3}" ]; then # uid/user name not given
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                export SOFT_DIR="${SOFTWARE_DIR}"
            else
                export LOG="${HOME_DIR}$(${ID_BIN} ${ID_SVD})/install.log"
                export SOFT_DIR="${HOME_DIR}$(${ID_BIN} ${ID_SVD})/${HOME_APPS_DIR}"
            fi
        else
            if [ ! "$(${ID_BIN} ${ID_SVD})" = "${3}" ]; then
                check_root
                export LOG="${HOME_DIR}${3}/install.log"
                export SOFT_DIR="${HOME_DIR}${3}/${HOME_APPS_DIR}"
            else
                export LOG="${HOME_DIR}${3}/install.log"
                export SOFT_DIR="${HOME_DIR}${3}/${HOME_APPS_DIR}"
            fi
        fi
        APP_NAME="$(${PRINTF_BIN} "${2}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(${PRINTF_BIN} "${2}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        if [ -d "${SOFT_DIR}${APP_NAME}" ]; then
            note "Removing application: ${APP_NAME}"
            if [ "${APP_NAME}" = "/" ]; then
                error "Czy Ty orzeszki?"
                exit 1
            fi
            debug "Removing software from: ${SOFT_DIR}${APP_NAME}"
            ${RM_BIN} -rfv "${SOFT_DIR}${APP_NAME}" >> ${LOG}
        else
            error "Application: ${APP_NAME} not installed."
            exit 1
        fi
        exit
        ;;


    reload|rehash)
        if [ ! -z "${SHELL_PID}" ]; then
            update_shell_vars
            note "Reloading configuration of $(${BASENAME_BIN} ${SHELL}) with pid: ${SHELL_PID}…"
            ${KILL_BIN} -SIGUSR2 ${SHELL_PID}
        else
            write_info_about_shell_configuration
        fi
        exit
        ;;


    update|updatedefs)
        export USER_UID="$(${ID_BIN} ${ID_SVD})"
        export LOG="${HOME_DIR}${USER_UID}/install.log"
        export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
        export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
        export LISTS_DIR="${CACHE_DIR}lists/"
        export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        update_definitions "${USER_UID}"
        exit
        ;;


    available)
        export USER_UID="$(${ID_BIN} ${ID_SVD})"
        if [ ! "$(${ID_BIN} -u)" = "0" ]; then
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
        fi
        cd "${DEFINITIONS_DIR}"
        note "Available definitions:"
        ${LS_BIN} -m *def | ${SED_BIN} 's/\.def//g'
        note "Definitions count:"
        ${LS_BIN} -a *def | ${WC_BIN} -l
        exit
        ;;


    exportapp|export|exp)
        if [ "$2" = "" ]; then
            error "Missing second argument with export app is required!"
            exit 1
        fi
        if [ "$3" = "" ]; then
            error "Missing third argument with source app is required!"
            exit 1
        fi
        EXPORT="$2"
        APP="$(${PRINTF_BIN} "${3}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(${PRINTF_BIN} "${3}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        userUID="$4"
        export SOFT_DIR="${SOFTWARE_DIR}"
        if [ -z "${userUID}" ]; then
            export userUID="$(${ID_BIN} ${ID_SVD})"
            if [ ! "$(${ID_BIN} -u)" = "0" ]; then
                export SOFT_DIR="${HOME_DIR}${userUID}/${HOME_APPS_DIR}"
                export LOG="${HOME_DIR}${userUID}/install.log"
            fi
        else # uid given?
            if [ ! "$(${ID_BIN} -u)" = "0" ]; then
                export SOFT_DIR="${HOME_DIR}${userUID}/${HOME_APPS_DIR}"
                export LOG="${HOME_DIR}${userUID}/install.log"
                if [ ! "${userUID}" = "$(${ID_BIN} ${ID_SVD})" ]; then
                    check_root
                fi
            fi
        fi
        for dir in "/bin/" "/sbin/" "/libexec/"; do
            debug "Testing ${dir} looking into: ${SOFT_DIR}${APP}${dir}"
            if [ -e "${SOFT_DIR}${APP}${dir}${EXPORT}" ]; then
                note "Exporting binary: ${SOFT_DIR}${APP}${dir}${EXPORT}"
                ${LN_BIN} -vfs "${SOFT_DIR}${APP}${dir}${EXPORT}" "${SOFT_DIR}${APP}/exports/${EXPORT}" >> $LOG
            fi
        done
        exit
        ;;


    *)
        usage_howto
        ;;

    esac
else
    usage_howto
fi


# Update definitions and perform more checks
check_requirements


. ${DEFAULTS}
PATH=${DEFAULT_PATH}

for application in ${APPLICATIONS}; do

    for definition in ${DEFINITIONS_DIR}${application}.def; do
        debug "Reading definition: ${definition}"
        . ${DEFAULTS}
        . ${definition}
        note " -> Requirements for this definition: ${APP_REQUIREMENTS}"

        # fancy old style Capitalize
        APP_NAME="$(${PRINTF_BIN} "${APP_NAME}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(${PRINTF_BIN} "${APP_NAME}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        note
        note "Preparing application: ${APP_NAME}${APP_POSTFIX} (${APP_FULL_NAME} v${APP_VERSION})"
        note
        if [ "${USER_UID}" = "" ]; then
            debug "Normal build"
            export PREFIX="${SOFTWARE_DIR}${APP_NAME}"
        else
            debug "User build: ${USER_UID}"
            export PREFIX="${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}${APP_NAME}"
            if [ ! -d "${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}" ]; then
                ${MKDIR_BIN} -p "${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}"
            fi
        fi

        # append app postfix
        if [ ! -z "$APP_POSTFIX" ]; then
            export PREFIX="${PREFIX}${APP_POSTFIX}"
        fi


        run () {
            if [ ! -z "$1" ]; then
                if [ ! -e "${LOG}" ]; then
                    ${TOUCH_BIN} "${LOG}"
                fi
                debug "Running '$@' @ $(${DATE_BIN})"
                eval PATH=${PATH} time "$@" 1>> "${LOG}" 2>> "${LOG}"
                check_command_result $?
            else
                error "Empty command to run?"
                exit
            fi
        }

        execute_process () {
            if [ -z "$1" ]; then
                error "No param given for execute_process()!"
                exit_locked 1
            fi
            req_definition_file="${DEFINITIONS_DIR}${1}.def"
            debug "Checking requirement: $1 file: $req_definition_file"
            if [ ! -e "${req_definition_file}" ]; then
                error "Cannot fetch definition ${req_definition_file}! Aborting!"
                exit_locked 1
            fi

            . ${DEFAULTS}
            . ${req_definition_file}
            # force GNU compiler usage on definition side:
            if [ ! -z "${FORCE_GNU_COMPILER}" ]; then
                warn "Forcing use of GNU compiler for application: ${APP_NAME}"
                export CC="/usr/bin/gcc ${APP_COMPILER_ARGS}"
                export CXX="/usr/bin/g++ ${APP_COMPILER_ARGS}"
                export CPP="/usr/bin/cpp"
            else
                export CC="/usr/bin/clang ${APP_COMPILER_ARGS}"
                export CXX="/usr/bin/clang++ ${APP_COMPILER_ARGS}"
                export CPP="/usr/bin/clang-cpp"
                if [ "$($UNAME_BIN)" = "Darwin" ]; then
                    export CPP="/usr/bin/clang -E"
                fi
            fi
            export PATH="${PREFIX}/bin:${PREFIX}/sbin:${DEFAULT_PATH}"
            export LD_LIBRARY_PATH="${PREFIX}/lib:${PREFIX}/libexec:/usr/lib:/lib"
            export CFLAGS="-I${PREFIX}/include ${APP_COMPILER_ARGS} ${DEFAULT_COMPILER_FLAGS}"
            export CXXFLAGS="-I${PREFIX}/include ${APP_COMPILER_ARGS} ${DEFAULT_COMPILER_FLAGS}"
            export LDFLAGS="-L${PREFIX}/lib ${APP_LINKER_ARGS} ${DEFAULT_LDFLAGS}"
            if [ "$($UNAME_BIN)" = "Darwin" ]; then
                # NOTE: XXX: requires XQuartz installed!
                export PATH="$PATH:/opt/X11/bin"
                export DYLD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/X11/lib"
                export CFLAGS="$CFLAGS -I/opt/X11/include"
                export CXXFLAGS="$CXXFLAGS -I/opt/X11/include"
                export LDFLAGS="${LDFLAGS} -L/opt/X11/lib"
            fi

            export ALLOW=1
            if [ ! "$DISABLE_ON" = "" ]; then
                for disabled in ${DISABLE_ON}; do
                    debug "Running system: ${SYSTEM_NAME}"
                    debug "DisableOn element: ${disabled}"
                    if [ "$SYSTEM_NAME" = "${disabled}" ]; then
                        export ALLOW=0
                    fi
                done
            fi

            if [ "${ALLOW}" = "1" ]; then
                if [ -z "${APP_HTTP_PATH}" ]; then
                    error "No source given for definition! Aborting"
                    exit_locked 1
                else
                    BUILD_DIR="${CACHE_DIR}cache/${APP_NAME}${APP_POSTFIX}-${APP_VERSION}/"
                    ${MKDIR_BIN} -p "${BUILD_DIR}"
                    CUR_DIR="$(${PWD_BIN})"
                    cd "${BUILD_DIR}"
                    for bd in ${BUILD_DIR}/*; do
                        if [ -d ${bd} ]; then
                            debug "Unpacked source code found in build dir. Removing: ${bd}"
                            if [ "${bd}" != "/" ]; then # it's better to be safe than sorry
                                ${RM_BIN} -rf "${bd}"
                            fi
                        fi
                    done
                    if [ ! -e ${BUILD_DIR}${APP_NAME}*${APP_HTTP_PATH##*.} ]; then
                        note "-> Fetching requirement source from: ${APP_HTTP_PATH}"
                        run "${FETCH_BIN} ${APP_HTTP_PATH}"
                    else
                        debug "Already fetched. Using tarball from cache"
                    fi

                    file="$(${BASENAME_BIN} $($FIND_BIN ${BUILD_DIR} -depth 1 -type f))"
                    if [ "${APP_SHA}" = "" ]; then
                        warn "-> Missing SHA sum for source: ${file}. Check skipped."
                    else
                        note "-> Verifying source SHA of definition: ${APP_NAME} with file: ${file}"
                        if [ "${SYSTEM_NAME}" = "Darwin" ]; then
                            export cur="$(${SHA_BIN} ${file} | ${AWK_BIN} '{print $1}')"
                        fi
                        if [ "${SYSTEM_NAME}" = "FreeBSD" ]; then
                            export cur="$(${SHA_BIN} -q ${file})"
                        fi
                        if [ "${cur}" = "${APP_SHA}" ]; then
                            note "-> SHA sum matche."
                        else
                            error "-> SHA sum mismatch."
                        fi
                    fi

                    note "-> Unpacking source code of: ${APP_NAME}"
                    debug "Build dir: ${BUILD_DIR}"
                    APP_LOC=${BUILD_DIR}${APP_NAME}
                    debug "Entrering ${APP_LOC}"
                    run "${TAR_BIN} xf ${APP_LOC}*"
                    for dir in $(${LS_BIN} -F ${BUILD_DIR} | ${GREP_BIN} \/$); do
                        debug "Changing dir to: ${dir}${APP_SOURCE_DIR_POSTFIX}"
                        cd "${dir}${APP_SOURCE_DIR_POSTFIX}"
                        if [ ! -z "${APP_AFTER_UNPACK_CALLBACK}" ]; then
                            debug "Running after unpack callback"
                            run "${APP_AFTER_UNPACK_CALLBACK}"
                        fi

                        LIST_DIR="${DEFINITIONS_DIR}patches/$1"
                        if [ -d "${LIST_DIR}" ]; then
                            if [ "$1" = "${APP_NAME}" ]; then # apply patch only when application/requirement for which patch is designed for
                                note "-> Applying patches for application: ${APP_NAME}"
                                for patch in ${LIST_DIR}/*; do
                                    debug "Patching source code with patch: ${patch}"
                                    run "${PATCH_BIN} -i ${patch}"
                                done
                            fi
                        fi

                        if [ ! -z "${APP_AFTER_PATCH_CALLBACK}" ]; then
                            debug "Running after patch callback"
                            run "${APP_AFTER_PATCH_CALLBACK}"
                        fi

                        debug "-------------- PRE CONFIGURE SETTINGS DUMP --------------"
                        debug "Current DIR: $(${PWD_BIN})"
                        debug "PREFIX: ${PREFIX}"
                        debug "PATH: ${PATH}"
                        debug "CC: ${CC}"
                        debug "CXX: ${CXX}"
                        debug "CPP: ${CPP}"
                        debug "CXXFLAGS: ${CXXFLAGS}"
                        debug "CFLAGS: ${CFLAGS}"
                        debug "LDFLAGS: ${LDFLAGS}"
                        debug "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
                        if [ "${SYSTEM_NAME}" = "Darwin" ]; then
                            debug "DYLD_LIBRARY_PATH: ${DYLD_LIBRARY_PATH}"
                        fi

                        note "-> Configuring requirement: $1 with version: ${APP_VERSION}"
                        case ${APP_CONFIGURE_SCRIPT} in
                            ignore)
                                note "-> Ignored configuration part $1"
                                ;;

                            no-conf)
                                note "-> Skipped configuration for $1"
                                export APP_MAKE_METHOD="${APP_MAKE_METHOD} PREFIX=${PREFIX}"
                                export APP_INSTALL_METHOD="${APP_INSTALL_METHOD} PREFIX=${PREFIX}"
                                ;;

                            binary)
                                note "-> Binary definition: $1"
                                export APP_MAKE_METHOD="true"
                                export APP_INSTALL_METHOD="true"
                                ;;

                            cmake)
                                run "${APP_CONFIGURE_SCRIPT} . -LH -DCMAKE_INSTALL_PREFIX=${PREFIX}"
                                ;;

                            *)
                                run "${APP_CONFIGURE_SCRIPT} ${APP_CONFIGURE_ARGS} --prefix=${PREFIX}"
                                ;;

                        esac

                        if [ ! -z "${APP_AFTER_CONFIGURE_CALLBACK}" ]; then
                            debug "Running after configure callback"
                            run "${APP_AFTER_CONFIGURE_CALLBACK}"
                        fi

                        note "-> Building requirement: $1"
                        run "${APP_MAKE_METHOD}"
                        if [ ! -z "${APP_AFTER_MAKE_CALLBACK}" ]; then
                            debug "Running after make callback"
                            run "${APP_AFTER_MAKE_CALLBACK}"
                        fi

                        note "-> Installing requirement: $1"
                        run "${APP_INSTALL_METHOD}"
                        if [ ! "${APP_AFTER_INSTALL_CALLBACK}" = "" ]; then
                            debug "After install callback: ${APP_AFTER_INSTALL_CALLBACK}"
                            run "${APP_AFTER_INSTALL_CALLBACK}"
                        fi

                        debug "Marking as installed '$1' in: ${PREFIX}"
                        ${TOUCH_BIN} "${PREFIX}/$1${INSTALLED_MARK}"
                        debug "Writing version: ${APP_VERSION} of app: '${APP_NAME}' installed in: ${PREFIX}"
                        ${PRINTF_BIN} "${APP_VERSION}" > "${PREFIX}/$1${INSTALLED_MARK}"
                    done
                    cd "${CUR_DIR}"
                fi
            else
                warn "Requirement disabled on architecture: ${SYSTEM_NAME}. Marking dependency as already installed cause it's still required to build."
                if [ ! -d "${PREFIX}" ]; then
                    # case when disabled requirement is first on list of dependencies
                    ${MKDIR_BIN} -p ${PREFIX}
                fi
                ${TOUCH_BIN} "${PREFIX}/${req}${INSTALLED_MARK}"
                ${PRINTF_BIN} "provided-by-system" > "${PREFIX}/${req}${INSTALLED_MARK}"
            fi
        }

        debug "Installing app requirements: ${APP_REQUIREMENTS}"
        for req in ${APP_REQUIREMENTS}; do
            if [ -z "${req}" ]; then
                note "No requirements required. Skipping…"
                break
            else
                note "Processing requirement: $req"
                if [ -e "${PREFIX}/${req}${INSTALLED_MARK}" ]; then
                    note "-> ${req} is marked as installed/provided."
                else
                    export CHANGED="true"
                    execute_process "${req}"
                fi
            fi
        done

        mark () {
            debug "Marking definition: ${application} installed"
            ${TOUCH_BIN} "${PREFIX}/${application}${INSTALLED_MARK}"
            debug "Writing version: ${APP_VERSION} of app: '${application}' installed in: ${PREFIX}"
            ${PRINTF_BIN} "${APP_VERSION}" > "${PREFIX}/${application}${INSTALLED_MARK}"
        }

        if [ -e "${PREFIX}/${application}${INSTALLED_MARK}" ]; then
            if [ "${CHANGED}" = "true" ]; then
                note "-> At least one of app dependencies has been changed. Forced rebuild of application…"
                execute_process "${application}"
                unset CHANGED
                mark
            else
                note "-> ${application} is marked as already installed."
            fi
        else
            execute_process "${application}"
            mark
        fi

        . ${DEFINITIONS_DIR}${application}.def
        ${MKDIR_BIN} -p "${PREFIX}/exports"
        EXPORT_LIST=""
        for exp in ${APP_EXPORTS}; do
            for dir in "/bin/" "/sbin/" "/libexec/"; do
                debug "Testing ${dir} looking into: ${PREFIX}${dir}${exp}"
                if [ -f "${PREFIX}${dir}${exp}" ]; then # a file
                    if [ -x "${PREFIX}${dir}${exp}" ]; then # and it's executable'
                        ${LN_BIN} -vfs "${PREFIX}${dir}${exp}" "${PREFIX}/exports/${exp}" >> $LOG
                        exp_elem="$(${BASENAME_BIN} ${PREFIX}${dir}${exp})"
                        EXPORT_LIST="${EXPORT_LIST} ${exp_elem}"
                    fi
                fi
            done
        done
        note "Exporting binaries:${EXPORT_LIST}"

        if [ -z "${DEVEL}" ]; then
            note "-> Stripping all libraries…"
            for elem in $(${FIND_BIN} ${PREFIX} -name '*.so'); do
                debug "Stripping: ${elem}"
                "${STRIP_BIN}" -sv "${elem}" >> ${LOG} 2>> ${LOG}
            done
            note "-> Stripping all binaries…"
            for elem in "/bin/" "/sbin/" "/libexec/"; do
                if [ -d "${PREFIX}${elem}" ]; then
                    for e in $(${FIND_BIN} ${PREFIX}${elem}); do
                        if [ -f "${e}" ]; then
                            debug "Stripping: ${e}"
                            "${STRIP_BIN}" -s "${e}" >> ${LOG} 2>> ${LOG}
                        fi
                    done
                fi
            done
        else
            warn "Debug mode enabled. Omitting binary/library strip…"
        fi

        if [ ! -z "${USER_UID}" ]; then
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                debug "Setting owner of ${PREFIX} recursively to user: ${USER_UID}"
                ${CHOWN_BIN} -R ${USER_UID} "${HOME_DIR}${USER_UID}" # NOTE: sanity check.
            fi
        fi

    done
done


update_shell_vars
if [ ! "${APP_JAVA_ANCESTOR}" = "" ]; then
    note "-> Setting up Java ancestor: ${APP_JAVA_ANCESTOR}"
    case ${APP_JAVA_ANCESTOR} in
        JDK6_32)
            ${PRINTF_BIN} "\nexport PATH=\"${JDK6_32}/bin:\$PATH\"\n" >> $HOME/.profile
            ;;

        JDK6_64)
            note "   64bit JDK 1.6 ancestor"
            ${PRINTF_BIN} "\nexport PATH=\"${JDK6_64}/bin:\$PATH\"\n" >> $HOME/.profile
            ;;

        JDK7_32)
            note "   32bit JDK 1.7 ancestor"
            ${PRINTF_BIN} "\nexport PATH=\"${JDK7_32}/bin:\$PATH\"\n" >> $HOME/.profile
            ;;

        JDK7_64)
            note "   64bit JDK 1.7 ancestor"
            ${PRINTF_BIN} "\nexport PATH=\"${JDK7_64}/bin:\$PATH\"\n" >> $HOME/.profile
            ;;

        *)
            note "Wrong JDK ancestor"
            ;;
    esac
fi

if [ ! -z "${SHELL_PID}" ]; then
    note "All done. Reloading configuration of $(${BASENAME_BIN} ${SHELL}) with pid: ${SHELL_PID}…"
    ${KILL_BIN} -SIGUSR2 ${SHELL_PID}
else
    write_info_about_shell_configuration
fi


exit_locked
