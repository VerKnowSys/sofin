#!/bin/sh
# @author: Daniel (dmilith) Dettlaff (dmilith@verknowsys.com)


# config settings
DEBUG="false"
VERSION="0.10.4"

# global script settings
SCRIPT_NAME="$0"
MAIN_SOURCE_REPOSITORY="http://software.verknowsys.com/source/"
SOFTWARE_DIR="/Software/"
HOME_DIR="/Users/"
HOME_APPS_DIR="Apps/"
CACHE_DIR="${SOFTWARE_DIR}.cache/"
LOG="${CACHE_DIR}install.log"
DEFINITIONS_DIR="${CACHE_DIR}definitions/"
LISTS_DIR="${CACHE_DIR}lists/"
DEFAULTS="${DEFINITIONS_DIR}defaults.def"
DEFINITION_SNAPSHOT_FILE="defs.tar.gz"
DEFAULT_PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
SOFIN_PROFILE="/etc/profile_sofin"
DEPENDENCIES_FILE=".dependencies"
ECHOE="true"

# config binary requirements definitions
PWD_BIN="/bin/pwd"
LN_BIN="/bin/ln"
WHICH_BIN="/usr/bin/which"
TAIL_BIN="/usr/bin/tail"
CUT_BIN="/usr/bin/cut"
LS_BIN="/bin/ls"
ID_BIN="/usr/bin/id"
MKDIR_BIN="/bin/mkdir"
TAR_BIN="/usr/bin/tar"
CAT_BIN="/bin/cat"
TR_BIN="/usr/bin/tr"
TOUCH_BIN="/usr/bin/touch"
RM_BIN="/bin/rm"
DATE_BIN="/bin/date"
PATCH_BIN="/usr/bin/patch"
SED_BIN="/usr/bin/sed"
CHOWN_BIN="/usr/sbin/chown"
GREP_BIN="/usr/bin/grep"
FETCH_BIN="/usr/bin/fetch"
UNAME_BIN="/usr/bin/uname"
FIND_BIN="/usr/bin/find"
STRIP_BIN="/usr/bin/strip"
BASENAME_BIN="/usr/bin/basename"
SORT_BIN="/usr/bin/sort"

# ANSI color definitions
red='\033[31;40m'
green='\033[32;40m'
yellow='\033[33;40m'
blue='\033[34;40m'
magenta='\033[35;40m'
cyan='\033[36;40m'
gray='\033[37;40m'
white='\033[38;40m'
reset='\033[0m'


# helpers

set_default_compiler () {
    #compiler settings
    $(${WHICH_BIN} clang > /dev/null) 
    if [ "$?" = "0" ]; then
        export CC="clang"
        export CXX="clang++"
        export CPP="clang -E"
    else
        unset CC
        unset CXX
        unset CPP
    fi
}


cecho () {
    if [ "${ECHOE}" = "false" ]; then
        echo "${2}${1}${reset}"
    else
        echo -e "${2}${1}${reset}"
    fi
    return
}


note () {
    cecho " * $1" ${green}
}


debug () {
    if [ "${DEBUG}" = "true" ]; then
        cecho " ~ $1" ${magenta}
    else
        cecho " ~ $1" ${magenta} >> ${LOG}
    fi
}


error () {
    cecho " # $1" ${red}
}


check_command_result () {
    if [ -z "$1" ]; then
        error "No param given for check_command_result()!"
        exit 1
    fi
    if [ "$1" = "0" ]; then
        debug "CORRECT"
    else
        error
        error
        error "FAILED. Last log below:"
        error
        ${TAIL_BIN} -n 50 "${LOG}"
        exit 1
    fi
}


check_definition_dir () {
    if [ ! -d "${SOFTWARE_DIR}" ]; then
        note "No ${SOFTWARE_DIR} found. Creating one."
        "${MKDIR_BIN}" -p "${SOFTWARE_DIR}"
    fi
    if [ ! -d "${CACHE_DIR}" ]; then
        note "No cache folder found. Creating one at: ${CACHE_DIR}"
        "${MKDIR_BIN}" -p "${CACHE_DIR}"
    fi
}


check_requirements () {
    if [ "${APPLICATIONS}" = "" ]; then
        error "Empty applications list!"
        exit 1
    fi
}


update_definitions () { # accepts optional user uid param
    note "Sofin v${VERSION}"
    tar_options="xf"
    rm_options="-rf"
    if [ "${DEBUG}" = "true" ]; then
        tar_options="${tar_options}v"
        rm_options="${rm_options}v"
    fi
    debug "Checking for destination directories existanceâ€¦"
    for element in "${LISTS_DIR}" "${DEFINITIONS_DIR}"; do
        ${MKDIR_BIN} -p "${element}" > /dev/null
        if [ ! -z "${1}" ]; then # param with uid not given
            ${TOUCH_BIN} ${LOG}
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                if [ ! -z "${1}" ]; then
                    debug "Chowning ${element} for user: ${1}"
                    ${CHOWN_BIN} -R ${1} "${element}" >> ${LOG}
                fi
            fi
        fi
        debug "Removing old definitions: ${element}"
        ${RM_BIN} ${rm_options} ${element} >> ${LOG}
    done
    cd "${CACHE_DIR}"
    debug "Working in cache dir: ${CACHE_DIR}"
    note "Updating definitions snapshot from: ${MAIN_SOURCE_REPOSITORY}definitions/${DEFINITION_SNAPSHOT_FILE}"
    ${FETCH_BIN} "${MAIN_SOURCE_REPOSITORY}definitions/${DEFINITION_SNAPSHOT_FILE}" >> "${LOG}" 2>> "${LOG}"
    ${TAR_BIN} ${tar_options} "${DEFINITION_SNAPSHOT_FILE}" >> "${LOG}" 2>> "${LOG}"
    if [ "$(${ID_BIN} -u)" = "0" ]; then
        if [ ! -z "${1}" ]; then
            debug "Chowning definitions for user: ${1}"
            ${CHOWN_BIN} -R ${1} "${CACHE_DIR}" >> ${LOG}
        fi
    fi
}


usage_howto () {
    error "No task param given! Built in tasks:"
    error "install, uninstall, cherrypick, exportapp, log, installed, getshellpath, getshellld, dependencies"
    exit
}


check_root () {
    if [ ! "$(${ID_BIN} -u)" = "0" ]; then
        error "This command should be run as root."
        exit
    fi
}


check_os () {
    if [ "$(${UNAME_BIN})" != "FreeBSD" ]; then
        error "Currently only FreeBSD host is supported."
        exit
    fi
}


# first part of checks
check_os
check_definition_dir
set_default_compiler


# unset conflicting environment variables
unset LDFLAGS
unset CFLAGS
unset CPPFLAGS
unset PATH
unset LD_LIBRARY_PATH
unset LD_PRELOAD


if [ ! "$1" = "" ]; then
    case $1 in


    log)
        if [ -z "${2}" ]; then
            export LOG="${HOME_DIR}$(${ID_BIN} -u)/install.log"
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                check_root
                export LOG="${CACHE_DIR}install.log"
            fi
        else
            export LOG="${HOME_DIR}${2}/install.log"
            if [ ! "$(${ID_BIN} -u)" = "${2}" ]; then
                check_root
            fi
        fi
        ${TAIL_BIN} -F ${LOG}
        ;;


    installed|list)
        if [ -z "${2}" ]; then
            export SOFT_DIR="${HOME_DIR}$(${ID_BIN} -u)/${HOME_APPS_DIR}"
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                check_root
                export SOFT_DIR="${SOFTWARE_DIR}"
            fi
        else
            export SOFT_DIR="${HOME_DIR}$2/${HOME_APPS_DIR}"
            if [ ! "$(${ID_BIN} -u)" = "${2}" ]; then
                check_root
            fi
        fi
        note "Installed applications:"
        note
        if [ -d ${SOFT_DIR} ]; then
            for app in ${SOFT_DIR}*; do
                note "$(${BASENAME_BIN} ${app}):"
                for req in $(${FIND_BIN} ${app} -maxdepth 1 -name '*.installed' | ${SORT_BIN}); do
                    note "-> $(${BASENAME_BIN} ${req}) version: $(${CAT_BIN} ${req})"
                done
                note
            done
        fi
        exit
        ;;


    getshellpath)
        result="${DEFAULT_PATH}"
        process () {
            for app in ${1}*; do # SOFT_DIR
                exp="${app}/exports"
                if [ -e "${exp}" ]; then
                    result="${exp}:${result}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}${2}/${HOME_APPS_DIR}
        fi
        echo "export PATH=${result}"
        unset result
        exit
        ;;


    getshellld)
        ldresult="/lib:/usr/lib"
        process () {
            for lib in ${1}*; do # LIB_DIR
                if [ -e "${lib}/lib" ]; then
                    ldresult="${lib}/lib:${ldresult}"
                fi
                if [ -e "${lib}/libexec" ]; then
                    ldresult="${lib}/libexec:${ldresult}"
                fi
            done
        }
        process ${SOFTWARE_DIR}
        if [ ! -z "$2" ]; then
            process ${HOME_DIR}$2/${HOME_APPS_DIR}
        fi
        echo "export LD_LIBRARY_PATH=${ldresult}"
        unset ldresult
        exit
        ;;


    cherrypick|one)
        if [ "$2" = "" ]; then
            error "For \"$1\" application installation mode, second argument with application definition name is required!"
            exit 1
        fi
        export APPLICATIONS="$2"
        if [ -z "${3}" ]; then
            export USER_UID="$(${ID_BIN} -u)"
        else
            export USER_UID="$3"
        fi
        if [ ! "$(${ID_BIN} -u)" = "${USER_UID}" ]; then
            check_root
        fi
        if [ "${USER_UID}" = "0" ]; then
            unset USER_UID
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        update_definitions ${USER_UID}
        note "Installing software: ${APPLICATIONS}"
        ;;


    deps|dependencies|local)
        LOCAL_DIR="$(${PWD_BIN})/"
        export USER_UID="$(${ID_BIN} -u)"
        if [ ! "$(${ID_BIN} -u)" = "${USER_UID}" ]; then
            check_root
        fi
        if [ "${USER_UID}" = "0" ]; then
            error "Installation of project dependencies cannot be run as root!"
            exit 1
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        update_definitions ${USER_UID}
        cd ${LOCAL_DIR}
        note "Looking for ${DEPENDENCIES_FILE} file in current directory: $(${PWD_BIN})/"
        if [ ! -e "$(${PWD_BIN})/${DEPENDENCIES_FILE}" ]; then
            error "Local dependencies file not found!"
            exit 1
        fi
        export APPLICATIONS="$(${CAT_BIN} ${LOCAL_DIR}${DEPENDENCIES_FILE} | ${TR_BIN} '\n' ' ')"
        note "Installing dependencies: ${APPLICATIONS}"        
        ;;


    install|add)
        if [ "$2" = "" ]; then
            error "For \"$1\" application installation mode, second argument with application list is required!"
            exit 1
        fi
        if [ -z "${3}" ]; then
            export USER_UID="$(${ID_BIN} -u)"
        else
            export USER_UID="$3"
        fi
        if [ ! "$(${ID_BIN} -u)" = "${USER_UID}" ]; then
            check_root
        fi
        if [ "${USER_UID}" = "0" ]; then
            unset USER_UID
        else
            export LOG="${HOME_DIR}${USER_UID}/install.log"
            export CACHE_DIR="${HOME_DIR}${USER_UID}/.cache/"
            export DEFINITIONS_DIR="${CACHE_DIR}definitions/"
            export LISTS_DIR="${CACHE_DIR}lists/"
            export DEFAULTS="${DEFINITIONS_DIR}defaults.def"
        fi
        update_definitions ${USER_UID}
        export APPLICATIONS="$(${CAT_BIN} ${LISTS_DIR}$2 | ${TR_BIN} '\n' ' ')"
        note "Installing software: ${APPLICATIONS}"
        ;;


    delete|remove|uninstall)
        if [ "$2" = "" ]; then
            error "For \"$1\" task, second argument with application name is required!"
            exit 1
        fi
        if [ -z "${3}" ]; then # uid/user name not given
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                check_root
                export SOFT_DIR="${SOFTWARE_DIR}"
            else
                export LOG="${HOME_DIR}$(${ID_BIN} -u)/install.log"
                export SOFT_DIR="${HOME_DIR}$(${ID_BIN} -u)/${HOME_APPS_DIR}"
            fi
        else
            if [ ! "$(${ID_BIN} -u)" = "${3}" ]; then
                check_root
                export LOG="${HOME_DIR}${3}/install.log"
                export SOFT_DIR="${HOME_DIR}${3}/${HOME_APPS_DIR}"
            else
                export LOG="${HOME_DIR}${3}/install.log"
                export SOFT_DIR="${HOME_DIR}${3}/${HOME_APPS_DIR}"
            fi
        fi
        APP_NAME="$(echo "${2}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(echo "${2}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        note "Removing application: ${APP_NAME}"
        if [ "${APP_NAME}" = "/" ]; then
            error "Czy Ty orzeszki?"
            exit 1
        fi
        debug "Removing software from: ${SOFT_DIR}${APP_NAME}"
        ${RM_BIN} -rfv "${SOFT_DIR}${APP_NAME}" >> ${LOG}
        exit
        ;;


    available)
        cd "${DEFINITIONS_DIR}"
        ${LS_BIN} -x *def
        exit
        ;;

        
    exportapp|export|exp)
        if [ "$2" = "" ]; then
            error "Missing second argument with export app is required!"
            exit 1
        fi
        if [ "$3" = "" ]; then
            error "Missing third argument with source app is required!"
            exit 1
        fi
        EXPORT="$2"
        APP="$(echo "${3}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(echo "${3}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        UID="$4"
        export SOFT_DIR="${SOFTWARE_DIR}"
        if [ -z "${UID}" ]; then
            export UID="$(${ID_BIN} -u)"
            if [ ! "${UID}" = "0" ]; then
                export SOFT_DIR="${HOME_DIR}${UID}/${HOME_APPS_DIR}"
                export LOG="${HOME_DIR}${UID}/install.log"
            fi
        else # uid given?
            if [ ! "${UID}" = "0" ]; then
                export SOFT_DIR="${HOME_DIR}${UID}/${HOME_APPS_DIR}"
                export LOG="${HOME_DIR}${UID}/install.log"
                if [ ! "${UID}" = "$(${ID_BIN} -u)" ]; then
                    check_root
                fi
            fi
        fi
        for dir in "/bin/" "/sbin/" "/libexec/"; do
            debug "Testing ${dir} looking into: ${SOFT_DIR}${APP}${dir}"
            if [ -e "${SOFT_DIR}${APP}${dir}${EXPORT}" ]; then
                note "Exporting binary: ${SOFT_DIR}${APP}${dir}${EXPORT}"
                ${LN_BIN} -vfs "${SOFT_DIR}${APP}${dir}${EXPORT}" "${SOFT_DIR}${APP}/exports/${EXPORT}" >> $LOG
            fi
        done
        exit
        ;;


    *)
        usage_howto
        ;;

    esac
else
    usage_howto
fi


# Update definitions and perform more checks
check_requirements


. ${DEFAULTS}
PATH=${DEFAULT_PATH}

for application in ${APPLICATIONS}; do

    for definition in ${DEFINITIONS_DIR}${application}.def; do
        debug "Reading definition: ${definition}"
        . ${DEFAULTS}
        . ${definition}

        # fancy old style Capitalize
        APP_NAME="$(echo "${APP_NAME}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(echo "${APP_NAME}" | ${SED_BIN} 's/^[a-zA-Z]//')"
        note
        note "Preparing application: ${APP_NAME}${APP_POSTFIX} (${APP_FULL_NAME} v${APP_VERSION})"
        if [ "${USER_UID}" = "" ]; then
            debug "Normal build"
            export PREFIX="${SOFTWARE_DIR}${APP_NAME}"
        else
            debug "User build: ${USER_UID}"
            export PREFIX="${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}${APP_NAME}"
            if [ ! -d "${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}" ]; then
                ${MKDIR_BIN} -p "${HOME_DIR}${USER_UID}/${HOME_APPS_DIR}"
            fi
        fi
        
        # append app postfix
        if [ ! -z "$APP_POSTFIX" ]; then
            export PREFIX="${PREFIX}${APP_POSTFIX}"
        fi


        run () {
            if [ ! -z "$1" ]; then
                export PATH="${PREFIX}/bin:${PREFIX}/sbin:${DEFAULT_PATH}"
                export LD_LIBRARY_PATH="${PREFIX}/lib:${PREFIX}/libexec"
                debug "PATH: ${PATH}" >> "${LOG}"
                debug "CC: ${CC}" >> "${LOG}"
                debug "CXX: ${CXX}" >> "${LOG}"
                debug "CPP: ${CPP}" >> "${LOG}"
                debug "CXXFLAGS: ${CXXFLAGS}" >> "${LOG}"
                debug "CFLAGS: ${CFLAGS}" >> "${LOG}"
                debug "LDFLAGS: ${LDFLAGS}" >> "${LOG}"
                debug "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}" >> "${LOG}"
                debug "Current DIR: ${BUILD_DIR}${dir}" >> "${LOG}"
                if [ ! -e "${LOG}" ]; then
                    ${TOUCH_BIN} "${LOG}"
                fi
                debug "Running '$@' @ $(${DATE_BIN})" >> "${LOG}"
                eval PATH=${PATH} time "$@" 1>> "${LOG}" 2>> "${LOG}"
                check_command_result $?
            else
                error "Empty command to run?"
                exit
            fi
        }

        execute_process () {
            if [ -z "$1" ]; then
                error "No param given for execute_process()!"
                exit 1
            fi
            req_definition_file="${DEFINITIONS_DIR}${1}.def"
            debug "Checking requirement: $1 file: $req_definition_file"
            if [ ! -e "${req_definition_file}" ]; then
                error "Cannot fetch definition ${req_definition_file}! Aborting!"
                exit 1
            fi

            . $DEFAULTS
            . $req_definition_file
            # force GNU compiler usage on definition side:
            if [ ! -z "${FORCE_GNU_COMPILER}" ]; then
                debug "Forcing use of GNU compiler for application: ${APP_NAME}"
                export CC="gcc"
                export CXX="g++"
                export CPP="cpp"
            else
                set_default_compiler
            fi
            export ALLOW=1
            if [ ! "$DISABLE_ON" = "" ]; then
                for disabled in ${DISABLE_ON}; do
                    debug "Running system: $SYSTEM_NAME"
                    debug "DisableOn element: $disabled"
                    if [ "$SYSTEM_NAME" = "$disabled" ]; then
                        export ALLOW=0
                    fi
                done
            fi

            if [ "$ALLOW" = "1" ]; then
                if [ -z "$APP_HTTP_PATH" ]; then
                    debug "After install callback: $APP_AFTER_INSTALL_CALLBACK"
                    run $APP_AFTER_INSTALL_CALLBACK
                else
                    BUILD_DIR="${CACHE_DIR}cache/${APP_NAME}${APP_POSTFIX}-${APP_VERSION}/"
                    ${MKDIR_BIN} -p "${BUILD_DIR}"
                    CUR_DIR="$(${PWD_BIN})"
                    cd "${BUILD_DIR}"
                    for bd in ${BUILD_DIR}/*; do
                        if [ -d ${bd} ]; then
                            debug "Unpacked source code found in build dir. Removing: ${bd}"
                            if [ "${bd}" != "/" ]; then # it's better to be safe than sorry
                                ${RM_BIN} -rf "${bd}"
                            fi
                        fi
                    done
                    if [ ! -e ${BUILD_DIR}${1}*tar.gz ]; then # TODO: tar.gz is currently the only supported format
                        note "-> Fetching requirement source from: ${APP_HTTP_PATH}"
                        run ${FETCH_BIN} ${APP_HTTP_PATH}
                    else
                        debug "Already fetched. Using tarball from cache"
                    fi
                    note "-> Unpacking source code of: ${APP_NAME}"
                    debug "Build dir: ${BUILD_DIR}"
                    run ${TAR_BIN} xf ${BUILD_DIR}${APP_NAME}*
                    debug "Entrering ${BUILD_DIR}${APP_NAME}*" >> "${LOG}"
                    for dir in $(${LS_BIN} -F ${BUILD_DIR} | ${GREP_BIN} \/$); do
                        debug "Changing dir to: $dir" >> "${LOG}"
                        cd "${dir}${APP_SOURCE_DIR_POSTFIX}"
                        export CXXFLAGS="-I${PREFIX}/include ${APP_COMPILER_ARGS}"
                        export CFLAGS="-I${PREFIX}/include ${APP_COMPILER_ARGS}"
                        export LDFLAGS="-L${PREFIX}/lib ${APP_LINKER_ARGS}"
                        LIST_DIR="${DEFINITIONS_DIR}patches/$1"
                        if [ -d "${LIST_DIR}" ]; then
                            if [ "$1" = "${APP_NAME}" ]; then # apply patch only when application/requirement for which patch is designed for
                                note "-> Applying patches for application: ${application}"
                                for patch in ${LIST_DIR}/*; do
                                    debug "Patching source code with patch: ${patch}"
                                    run ${PATCH_BIN} -i "${patch}"
                                done
                            fi
                        fi

                        note "-> Configuring requirement: $1"
                        case ${APP_CONFIGURE_SCRIPT} in
                            ignore)
                                note "-> Ignored configuration part $1"
                                ;;
                                    
                            no-conf)
                                note "-> Skipped configuration for $1"
                                export APP_MAKE_METHOD="${APP_MAKE_METHOD} PREFIX=${PREFIX}"
                                export APP_INSTALL_METHOD="${APP_INSTALL_METHOD} PREFIX=${PREFIX}"
                                ;;

                            binary)
                                note "-> Binary definition: $1"
                                export APP_MAKE_METHOD="true"
                                export APP_INSTALL_METHOD="true"
                                ;;

                            cmake)
                                run ${APP_CONFIGURE_SCRIPT} . -LH -DCMAKE_INSTALL_PREFIX="${PREFIX}"
                                ;;

                            *)
                                run ${APP_CONFIGURE_SCRIPT} ${APP_CONFIGURE_ARGS} --prefix="${PREFIX}"
                                ;;

                        esac

                        note "-> Building requirement: $1"
                        run "${APP_MAKE_METHOD}"
                        note "-> Installing requirement: $1"
                        run "${APP_INSTALL_METHOD}"
                        if [ ! "${APP_AFTER_INSTALL_CALLBACK}" = "" ]; then
                            debug "After install callback: ${APP_AFTER_INSTALL_CALLBACK}"
                            run "${APP_AFTER_INSTALL_CALLBACK}"
                        fi
                        
                        debug "Marking as installed '$1' in: ${PREFIX}"
                        ${TOUCH_BIN} "${PREFIX}/$1.installed"
                        debug "Writing version: ${APP_VERSION} of app: '${APP_NAME}' installed in: ${PREFIX}"
                        echo "${APP_VERSION}" > "${PREFIX}/$1.installed"
                    done
                    cd "${CUR_DIR}"
                fi
            else
                note "This bundle is disabled on current architecture ($(${UNAME_BIN})). Skippedâ€¦"
            fi
        }
        
        debug "Installing app requirements: ${APP_REQUIREMENTS}"
        for req in ${APP_REQUIREMENTS}; do
            if [ -z "${req}" ]; then
                note "No requirements required. Skippingâ€¦"
                break
            else
                note "Processing requirement: $req"
                if [ -e "${PREFIX}/${req}.installed" ]; then
                    note "-> Requirement: ${req} marked as installed. Skippingâ€¦"
                else
                    export CHANGED="true"
                    execute_process "${req}"
                fi
            fi
        done
        
        mark () {
            debug "Marking definition: ${application} installed"
            ${TOUCH_BIN} "${PREFIX}/${application}.installed"
            debug "Writing version: ${APP_VERSION} of app: '${application}' installed in: ${PREFIX}"
            echo "${APP_VERSION}" > "${PREFIX}/${application}.installed"
        }
        
        if [ -e "${PREFIX}/${application}.installed" ]; then
            if [ "${CHANGED}" = "true" ]; then
                note "-> At least one of app dependencies has been changed. Forced rebuild of applicationâ€¦"
                execute_process "${application}"
                unset CHANGED
                mark
            else
                note "-> Requirement: ${application} marked as installed. Skippingâ€¦"
            fi
        else
            execute_process "${application}"
            mark
        fi
        
        . ${DEFINITIONS_DIR}${application}.def
        ${MKDIR_BIN} -p "${PREFIX}/exports"
        for exp in ${APP_EXPORTS}; do
            for dir in "/bin/" "/sbin/" "/libexec/"; do
                debug "Testing ${dir} looking into: ${PREFIX}${dir}${exp}"
                if [ -e "${PREFIX}${dir}${exp}" ]; then
                    note "Exporting binary: ${PREFIX}${dir}${exp}"
                    ${LN_BIN} -vfs "${PREFIX}${dir}${exp}" "${PREFIX}/exports/${exp}" >> $LOG
                fi
            done
        done
        
        note "Stripping all librariesâ€¦"
        for elem in $(${FIND_BIN} ${PREFIX} -name '*.so'); do
            debug "Stripping: ${elem}"
            "${STRIP_BIN}" -sv "${elem}" >> ${LOG} 2>> ${LOG}
        done
        note "Stripping all binariesâ€¦"
        for elem in "/bin/" "/sbin/" "/libexec/"; do
            if [ -d "${PREFIX}${elem}" ]; then
                for e in $(${FIND_BIN} ${PREFIX}${elem}); do
                    if [ -f "${e}" ]; then
                        debug "Stripping: ${e}"
                        "${STRIP_BIN}" -sv "${e}" >> ${LOG} 2>> ${LOG}
                    fi
                done
            fi
        done
        
        if [ ! -z "${USER_UID}" ]; then
            debug "Setting owner of ${PREFIX} recursively to user: ${USER_UID}"
            if [ "$(${ID_BIN} -u)" = "0" ]; then
                ${CHOWN_BIN} -R ${USER_UID} "${HOME_DIR}${USER_UID}" # NOTE: sanity check.
            fi
        fi

    done
done


if [ "${USER_UID}" = "" ]; then
    note "Updating ${SOFIN_PROFILE} settingsâ€¦"
    echo $(${SCRIPT_NAME} getshellpath) > ${SOFIN_PROFILE}
    echo $(${SCRIPT_NAME} getshellld) >> ${SOFIN_PROFILE}
else
    note "Updating ${HOME_DIR}${USER_UID}/.profile settingsâ€¦"
    echo $(${SCRIPT_NAME} getshellpath ${USER_UID}) > ${HOME_DIR}${USER_UID}/.profile
    echo $(${SCRIPT_NAME} getshellld ${USER_UID}) >> ${HOME_DIR}${USER_UID}/.profile
    
fi

note "All done. Please reload your SHELL configuration now."

