#
# alternatives.fact - definitions of possible alternatives for base utilities

# base system alternatives:
# uname:
if [ -x "/usr/bin/uname" ]; then
    UNAME_BIN="/usr/bin/uname"
elif [ -x "/bin/uname" ]; then
    UNAME_BIN="/bin/uname"
elif [ -x "/usr/pkg/bin/uname" ]; then
    UNAME_BIN="/usr/pkg/bin/uname"
elif [ -x "/usr/local/bin/uname" ]; then
    UNAME_BIN="/usr/local/bin/uname"
fi

# basename:
if [ -x "/usr/bin/basename" ]; then
    BASENAME_BIN="/usr/bin/basename"
elif [ -x "/bin/basename" ]; then
    BASENAME_BIN="/bin/basename"
elif [ -x "/usr/pkg/bin/basename" ]; then
    BASENAME_BIN="/usr/pkg/bin/basename"
elif [ -x "/usr/local/bin/basename" ]; then
    BASENAME_BIN="/usr/local/bin/basename"
fi


# NOTE: under UNIXes linker has to be: /usr/bin/ld.lld
# WARN: /usr/bin/ld.lld must not exists in /usr/bin under Darwins!
if [ -x "/usr/bin/ld.lld" ]; then
    LLD_BIN="/usr/bin/ld.lld"
elif [ -x "/usr/pkg/bin/ld.lld" ]; then
    LLD_BIN="/usr/pkg/bin/ld.lld"
elif [ -x "/usr/local/bin/ld.lld" ]; then
    LLD_BIN="/usr/local/bin/ld.lld"
else
    # NOTE: Darwin should end here, cause it requires manual linker override
    #       Linker setup finalizes in compiler_setup()
    unset LLD_BIN
fi

# For Golden linker, has to be: /usr/bin/ld.gold
if [ -x "/usr/bin/ld.gold" ]; then
    GOLD_BIN="/usr/bin/ld.gold"
elif [ -x "/Software/Gold/exports/ld.gold" ]; then
    GOLD_BIN="/Software/Gold/exports/ld.gold"
else
    unset GOLD_BIN
fi

# touch:
if [ -x "/usr/bin/touch" ]; then
    TOUCH_BIN="/usr/bin/touch"
elif [ -x "/bin/touch" ]; then
    TOUCH_BIN="/bin/touch"
elif [ -x "/usr/pkg/bin/touch" ]; then
    TOUCH_BIN="/usr/pkg/bin/touch"
elif [ -x "/usr/local/bin/touch" ]; then
    TOUCH_BIN="/usr/local/bin/touch"
fi

# dylib bundle software (macOS specific):
if [ -x "/Software/Dylibbundler/bin/dylibbundler" ]; then
    SOFIN_LIBBUNDLE_BIN="/Software/Dylibbundler/bin/dylibbundler"
elif [ -x "/usr/bin/sofin-dylibbundler" ]; then # old sofin bundler
    SOFIN_LIBBUNDLE_BIN="/usr/bin/sofin-dylibbundler"
else
    unset SOFIN_LIBBUNDLE_BIN
fi

# Curl default options:
FETCH_OPTS="--progress-bar --connect-timeout 3 --remote-name --cacert ${DEFAULT_CACERT} --fail"
if [ -x "/usr/bin/curl" ]; then
    FETCH_BIN="/usr/bin/curl"
elif [ -x "/bin/curl" ]; then
    FETCH_BIN="/bin/curl"
elif [ -x "/usr/bin/fetch" ]; then
    FETCH_BIN="/usr/bin/fetch"
    FETCH_OPTS="--timeout=5 --retry --ca-cert=${DEFAULT_CACERT}"
elif [ -x "/usr/bin/wget" ]; then
    FETCH_BIN="/usr/bin/wget"
    FETCH_OPTS="--continue --no-verbose --progress=bar --ca-certificate=${DEFAULT_CACERT}"
fi

# Git
if [ -x "/Software/Git/bin/git" ]; then
    GIT_BIN="/Software/Git/bin/git"
elif [ -x "/usr/bin/git" ]; then
    GIT_BIN="/usr/bin/git"
elif [ -x "/usr/pkg/bin/git" ]; then
    GIT_BIN="/usr/pkg/bin/git"
elif [ -x "/usr/local/bin/git" ]; then
    GIT_BIN="/usr/local/bin/git"
fi

# Zfs: zfs
if [ -x "/sbin/zfs" ]; then
    ZFS_BIN="/sbin/zfs"
elif [ -x "/usr/sbin/zfs" ]; then
    ZFS_BIN="/usr/sbin/zfs"
elif [ -x "/usr/local/sbin/zfs" ]; then
    ZFS_BIN="/usr/local/sbin/zfs"
elif [ -x "/usr/pkg/sbin/zfs" ]; then
    ZFS_BIN="/usr/pkg/sbin/zfs"
else
    unset ZFS_BIN
fi

# Zfs: zpool
if [ -x "/sbin/zpool" ]; then
    ZPOOL_BIN="/sbin/zpool"
elif [ -x "/usr/sbin/zpool" ]; then
    ZPOOL_BIN="/usr/sbin/zpool"
elif [ -x "/usr/pkg/sbin/zpool" ]; then
    ZPOOL_BIN="/usr/pkg/sbin/zpool"
elif [ -x "/usr/local/sbin/zpool" ]; then
    ZPOOL_BIN="/usr/local/sbin/zpool"
else
    unset ZPOOL_BIN
fi

# Default shell - sh/zsh
if [ -x "/Software/Zsh/exports/zsh" ]; then
    ZSH_BIN="/Software/Zsh/exports/zsh"
elif [ -x "/usr/bin/zsh" ]; then
    ZSH_BIN="/usr/bin/zsh"
elif [ -x "/usr/pkg/bin/zsh" ]; then
    ZSH_BIN="/usr/pkg/bin/zsh"
elif [ -x "/bin/zsh" ]; then
    ZSH_BIN="/bin/zsh"
else
    ZSH_BIN="${DEFAULT_FALLBACK_SHELL}"
fi

# Ccache
if [ -x "${SERVICES_DIR}/${SOFIN_BUNDLE_NAME}/exports/ccache" ]; then
    CCACHE_BIN="${SERVICES_DIR}/${SOFIN_BUNDLE_NAME}/exports/ccache"
elif [ -x "/usr/bin/ccache" ]; then
    CCACHE_BIN="/usr/bin/ccache"
elif [ -x "/usr/pkg/bin/ccache" ]; then
    CCACHE_BIN="/usr/pkg/bin/ccache"
elif [ -x "/bin/ccache" ]; then
    CCACHE_BIN="/bin/ccache"
else
    unset CCACHE_BIN
fi
