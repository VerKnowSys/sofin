# System specific configuration

# Handle default value for USER:
USER="${USER:-$(${ID_BIN} ${DEFAULT_ID_USER_NAME_OPTS} 2>/dev/null)}"
SYSTEM_NAME="${SYSTEM_NAME:-$(${UNAME_BIN} -s 2>/dev/null)}"
SYSTEM_ARCH="${SYSTEM_ARCH:-$(${UNAME_BIN} -m 2>/dev/null)}"
if [ -z "${SYSTEM_NAME}" -o \
     -z "${SYSTEM_ARCH}" ]; then
    ${PRINTF_BIN} "${ColorRed}%s\n" "FATAL: Both SYSTEM_NAME and SYSTEM_ARCH environment variables, require a value!"
    exit ${ERRORCODE_TASK_FAILURE}
fi

if [ -x "${SOFIN_VERSION_UTILITY_BIN}" ]; then
    SYSTEM_VERSION="${SYSTEM_VERSION:-$(${SOFIN_VERSION_UTILITY_BIN} 2>/dev/null)}"
    if [ -z "${SYSTEM_VERSION}" ]; then
        ${PRINTF_BIN} "${ColorRed}%s\n" "FATAL: SYSTEM_VERSION environment variable, requires a value!"
        exit ${ERRORCODE_TASK_FAILURE}
    fi
    OS_TRIPPLE="${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"
    SYS_SPECIFIC_BINARY_REMOTE="${MAIN_BINARY_PREFIX}/${OS_TRIPPLE}"
else
    unset SYSTEM_VERSION OS_TRIPPLE SYS_SPECIFIC_BINARY_REMOTE
fi

# Since Git is often used in defaunitions, we're allowing definitions to use it's path:
if [ -x "${GIT_BIN}" -a \
     -z "${GIT_EXPORTS}" ]; then
    # by default try exported git from default Git bundle:
    GIT_EXPORTS="$(${DIRNAME_BIN} "${GIT_BIN}" 2>/dev/null)/exports"
    if [ -x "${GIT_EXPORTS}/git" ]; then
        GIT_EXPORTS=":${GIT_EXPORTS}"
    else
        GIT_EXPORTS="$(${DIRNAME_BIN} "${GIT_BIN}" 2>/dev/null)/bin"
        if [ -x "${GIT_EXPORTS}/git" ]; then
            GIT_EXPORTS=":${GIT_EXPORTS}"
        else
            unset GIT_EXPORTS
        fi
    fi
else
    unset GIT_EXPORTS
fi


SOFIN_SHELL_BLOCK=$(${CAT_BIN} <<EOF
#--------Sofin-Environment-Block------#
trap '. "\${HOME}/.profile"' USR2
if [ -e "\${HOME}/.profile" ]; then
    . "\${HOME}/.profile"
fi
readonly SHELL_PID="\$\$"
export SHELL_PID

EOF
)


setup_zfs_default_setup () {
    # Zfs: set DEFAULT_ZPOOL to first available zpool
    _zpool="$(${ZPOOL_BIN} list -H 2>/dev/null | eval "${FIRST_ARG_GUARD}")"
    if [ -n "${_zpool}" ]; then
        DEFAULT_ZPOOL="${DEFAULT_ZPOOL:-${_zpool}}"
    else
        DEFAULT_ZPOOL="${DEFAULT_ZPOOL:-zroot}"
    fi
    ORIGIN_ZFS_SNAP_NAME="${DEFAULT_ORIGIN_SNAPSHOT_NAME}"
    ZFS_SEND_OPTS="${DEFAULT_SNAPSHOT_SEND_OPTS}"
    ZFS_RECEIVE_OPTS="${DEFAULT_SNAPSHOT_RECEIVE_OPTS}"

    # For ZFS we don't use tarballs anymore:
    DEFAULT_ARCHIVE_EXT="${DEFAULT_SOFTWARE_SNAPSHOT_EXT}"
}


fallback_nonzfs_setup () {
    # NOTE: Even if ZFS is present on OSX; We want it disabled (for now)
    unset CAP_SYS_ZFS ORIGIN_ZFS_SNAP_NAME DEFAULT_ZPOOL ZFS_SEND_OPTS ZFS_RECEIVE_OPTS
    # 1. ZFS default archive extension determines file type
    # 2. Fallback to tarballs on ZFS-less OSes is done by capability check
    DEFAULT_ARCHIVE_EXT="${DEFAULT_ARCHIVE_TARBALL_EXT}"
}


determine_system_capabilites () {
    ${ZPOOL_BIN} list >/dev/null 2>/dev/null
    if [ "${?}" = "0" ]; then
        CAP_SYS_ZFS=YES
        if [ "${SYSTEM_NAME}" = "Darwin" ]; then
            fallback_nonzfs_setup
        else
            setup_zfs_default_setup
        fi
    else # NOTE: fallback, cause zpool command failed:
        fallback_nonzfs_setup
    fi

    ${SYSCTL_BIN} hardening.pax >/dev/null 2>&1
    if [ "${?}" = "0" ]; then
        CAP_SYS_HARDENED=YES
    else
        unset CAP_SYS_HARDENED
    fi

    ${SYSCTL_BIN} kern.dtrace >/dev/null 2>&1
    if [ "${?}" = "0" ]; then
        CAP_SYS_DTRACE=YES
        ${KLDLOAD_BIN} dtrace >/dev/null 2>&1 || true
        ${KLDLOAD_BIN} dtraceall >/dev/null 2>&1 || true
    else
        unset CAP_SYS_DTRACE
    fi

    ${SYSCTL_BIN} kern.features.linux64 >/dev/null 2>&1
    if [ "${?}" = "0" ]; then
        CAP_SYS_LINUX64_ABI=YES
        ${KLDLOAD_BIN} linux64 >/dev/null 2>&1|| true
    else
        unset CAP_SYS_LINUX64_ABI
    fi

    # Production mode is default mode
    CAP_SYS_PRODUCTION=YES

    if [ -f "${SERVED_BUILDHOST_INDICATOR_FILE}" -o \
         -f "${SERVED_BUILDHOST_INDICATOR_FILE_ALT}" ]; then
        CAP_SYS_BUILDHOST=YES
        unset CAP_SYS_PRODUCTION
    else
        unset CAP_SYS_BUILDHOST
    fi

    # Detect available linkers:
    unset CAP_SYS_COMPILER_FLAGS CAP_SYS_LLVM_LD CAP_SYS_GOLD_LD CAP_SYS_FALLBACK_LD

    # NOTE: Default Linker pick/use order:
    # 1. LLVM Linker (ld.lld)
    # 2. Gold Linker (ld.gold)
    # 3. Legacy Linker (ld)
    #
    if [ -x "${GOLD_BIN}" -a \
         -x "${GOLD_SO}" ]; then
        unset CAP_SYS_LLVM_LD
        CAP_SYS_GOLD_LD=YES
        CAP_SYS_COMPILER_FLAGS="-fuse-ld=gold"
    fi
    if [ -x "${LLD_BIN}" ]; then
        unset CAP_SYS_GOLD_LD
        CAP_SYS_LLVM_LD=YES
        CAP_SYS_COMPILER_FLAGS="-fuse-ld=lld"
    fi

    # NOTE: workstation system:
    if [ "Darwin" = "${SYSTEM_NAME}" ]; then
        # NOTE: Under Darwin we have to replace original linker with LLVM one.
        #       On this system it has to be: /usr/bin/ld.
        # WARN: You may need to disable macOS SIP protection (10.11+) to modify files in /usr/bin
        unset CAP_SYS_GOLD_LD CAP_SYS_COMPILER_FLAGS
    fi
}

determine_system_capabilites
