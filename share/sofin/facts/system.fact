# System specific configuration

# Handle default value for USER:
USER="${USER:-$(${ID_BIN} ${DEFAULT_ID_USER_NAME_OPTS} 2>/dev/null)}"
SYSTEM_NAME="${SYSTEM_NAME:-$(${UNAME_BIN} -s 2>/dev/null)}"
SYSTEM_ARCH="${SYSTEM_ARCH:-$(${UNAME_BIN} -m 2>/dev/null)}"
if [ -z "${SYSTEM_NAME}" -o \
     -z "${SYSTEM_ARCH}" ]; then
    ${PRINTF_BIN} "${ColorRed}FATAL: Both \$SYSTEM_NAME and \$SYSTEM_ARCH environment variables, require a value!\n"
    exit ${ERRORCODE_TASK_FAILURE}
fi

if [ -x "${SOFIN_VERSION_UTILITY_BIN}" ]; then
    SYSTEM_VERSION="$(${SOFIN_VERSION_UTILITY_BIN} 2>/dev/null)"
    if [ -z "${SYSTEM_VERSION}" ]; then
        ${PRINTF_BIN} "${ColorRed}FATAL: \$SYSTEM_VERSION environment variable, requires a value!\n"
        exit ${ERRORCODE_TASK_FAILURE}
    fi
    OS_TRIPPLE="${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"
    SYS_SPECIFIC_BINARY_REMOTE="${MAIN_BINARY_PREFIX}/${OS_TRIPPLE}"
else
    unset SYSTEM_VERSION OS_TRIPPLE SYS_SPECIFIC_BINARY_REMOTE
fi

# Since Git is often used in defaunitions, we're allowing definitions to use it's path:
if [ -x "${GIT_BIN}" -a \
     -z "${GIT_ROOT_DIR}" ]; then
    GIT_ROOT_DIR="$(${BASENAME_BIN} "$(${BASENAME_BIN} "${GIT_BIN}" 2>/dev/null)" 2>/dev/null)"
else
    unset GIT_ROOT_DIR
fi


SOFIN_SHELL_BLOCK=$(${CAT_BIN} <<EOF
#------Sofin-Environment-Block------#
trap 'source "\$HOME/.profile"' USR2
if [ -e "\$HOME/.profile" ]; then
    source "\$HOME/.profile"
fi
export SHELL_PID="\$\$"
EOF
)


determine_system_capabilites () {
    # TODO: add ability to run on systems without present C_COMPILER_NAME
    ${ZPOOL_BIN} list >/dev/null 2>/dev/null
    if [ "$?" = "0" ]; then
        CAP_SYS_ZFS=YES
        if [ "${SYSTEM_NAME}" = "Darwin" ]; then
            # NOTE: Even if ZFS is present on OSX, by now we want it disabled for now..
            unset CAP_SYS_ZFS
        else
            # Zfs: set DEFAULT_ZPOOL to first available zpool
            DEFAULT_ZPOOL="$(${ZPOOL_BIN} list -H 2>/dev/null | eval "${FIRST_ARG_GUARD}")"
            ORIGIN_ZFS_SNAP_NAME="origin"

            # For ZFS we don't use tarballs anymore:
            DEFAULT_ARCHIVE_EXT="${DEFAULT_SOFTWARE_SNAPSHOT_EXT}"
        fi
    else
        unset CAP_SYS_ZFS DEFAULT_ZPOOL ORIGIN_ZFS_SNAP_NAME
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'hardening.pax' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_HARDENED=YES
    else
        unset CAP_SYS_HARDENED
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'kern.dtrace' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_DTRACE=YES
        ${KLDLOAD_BIN} dtrace >/dev/null 2>&1 || true
        ${KLDLOAD_BIN} dtraceall >/dev/null 2>&1 || true
    else
        unset CAP_SYS_DTRACE
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'kern.features.linux64' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_LINUX64_ABI=YES
        ${KLDLOAD_BIN} linux64 >/dev/null 2>&1|| true
    else
        unset CAP_SYS_LINUX64_ABI
    fi

}

determine_system_capabilites
