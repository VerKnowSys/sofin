# System specific configuration

if [ -z "${USER}" ]; then
    USER="$(${ID_BIN} ${DEFAULT_ID_USER_NAME_OPTS} 2>/dev/null)"
fi

SYSTEM_NAME="$(${UNAME_BIN} -s 2>/dev/null)"
SYSTEM_ARCH="$(${UNAME_BIN} -m 2>/dev/null)"
if [ -z "${SYSTEM_NAME}" -o \
     -z "${SYSTEM_ARCH}" ]; then
    echo "${red}FATAL: \$SYSTEM_NAME and \$SYSTEM_ARCH environment variables, require a value!"
    exit ${ERRORCODE_TASK_FAILURE}
fi

if [ -x "${SOFIN_VERSION_UTILITY_BIN}" ]; then
    SYSTEM_VERSION="$(${SOFIN_VERSION_UTILITY_BIN} 2>/dev/null)"
    if [ -z "${SYSTEM_VERSION}" ]; then
        echo "${red}FATAL: \$SYSTEM_VERSION environment variable, requires a value! You may check if Sofin is correctly installed before continue."
        exit ${ERRORCODE_TASK_FAILURE}
    fi
    OS_TRIPPLE="${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"
    SYS_SPECIFIC_BINARY_REMOTE="${MAIN_BINARY_PREFIX}/${OS_TRIPPLE}"
else
    unset SYSTEM_VERSION OS_TRIPPLE SYS_SPECIFIC_BINARY_REMOTE
fi


determine_system_capabilites () {
    ${ZPOOL_BIN} list >/dev/null 2>/dev/null
    if [ "$?" = "0" ]; then
        CAP_SYS_ZFS=YES

        # Zfs: set DEFAULT_ZPOOL to first available zpool
        DEFAULT_ZPOOL="$(${ZPOOL_BIN} list -H 2>/dev/null | ${CUT_BIN} -f1 2>/dev/null)"
        ORIGIN_ZFS_SNAP_NAME="origin"

        # For ZFS we don't use tarballs anymore:
        DEFAULT_ARCHIVE_EXT="${DEFAULT_SOFTWARE_SNAPSHOT_EXT}"
    else
        unset CAP_SYS_ZFS DEFAULT_ZPOOL ORIGIN_ZFS_SNAP_NAME
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'hardening.pax' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_HARDENED=YES
    else
        unset CAP_SYS_HARDENED
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'kern.dtrace' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_DTRACE=YES
        ${KLDLOAD_BIN} dtrace >/dev/null 2>&1 || true
        ${KLDLOAD_BIN} dtraceall >/dev/null 2>&1 || true
    else
        unset CAP_SYS_DTRACE
    fi

    ${SYSCTL_BIN} -a 2>/dev/null | ${GREP_BIN} 'kern.features.linux64' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        CAP_SYS_LINUX64_ABI=YES
        ${KLDLOAD_BIN} linux64 >/dev/null 2>&1|| true
    else
        unset CAP_SYS_LINUX64_ABI
    fi

}

determine_system_capabilites
