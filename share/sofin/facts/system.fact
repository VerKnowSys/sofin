#!/usr/bin/env sh

# Guards:
FIRST_ARG_GUARD="${CUT_BIN} -f1 2>/dev/null"
WORDS_COUNT_GUARD="${WC_BIN} -w 2>/dev/null | ${SED_BIN} 's/ //g' 2>/dev/null"
NEWLINES_TO_SPACES_GUARD="${TR_BIN} '\n' ' ' 2>/dev/null"
CUT_TRAILING_SPACES_GUARD="${SED_BIN} 's/ *$//g; s/  //g' 2>/dev/null"
HOST_ADDRESS_GUARD="${CUT_BIN} -d' ' -f2 2>/dev/null | ${CUT_BIN} -d'#' -f1 2>/dev/null"
CUTOFF_DEF_EXT_GUARD="${SED_BIN} -e \"s#${DEFAULT_DEF_EXT}##\" 2>/dev/null"
DUP_OUT_TO_ERR_GUARD="${TEE_BIN} /dev/stderr"
DUP_ERR_TO_OUT_GUARD="${TEE_BIN} /dev/stdout"

# Build timestamp in seconds since 1970
TIMESTAMP="${TIMESTAMP:-$(${DATE_BIN} "${DEFAULT_DATE_TS_OPTS}" 2>/dev/null)}"


# System specific configuration

# Handle default value for USER:
HOST="${HOST:-$(${HOSTNAME_BIN} 2>/dev/null)}"
USER="${USER:-$(${ID_BIN} ${DEFAULT_ID_USER_NAME_OPTS} 2>/dev/null)}"
SYSTEM_NAME="${SYSTEM_NAME:-$(uname -s 2>/dev/null)}"
SYSTEM_ARCH="${SYSTEM_ARCH:-$(uname -m 2>/dev/null)}"
if [ -z "${SYSTEM_NAME}" ] \
|| [ -z "${SYSTEM_ARCH}" ]; then
    printf "\n%b%b%b\n" "${ColorRed}" "FATAL: Both SYSTEM_NAME and SYSTEM_ARCH environment variables, require a value!" "${ColorReset}"
    finalize_and_quit_gracefully_with_exitcode "${ERRORCODE_VALIDATE_ENV_FAILURE}"
fi

if [ -x "${SOFIN_OS_VER_BIN}" ]; then
    SYSTEM_VERSION="$(${SOFIN_OS_VER_BIN} 2>/dev/null)"
    if [ -z "${SYSTEM_VERSION}" ]; then
        printf "\n%b%b%b\n" "${ColorRed}" "FATAL: SYSTEM_VERSION environment variable, requires a value!" "${ColorReset}"
        finalize_and_quit_gracefully_with_exitcode "${ERRORCODE_VALIDATE_ENV_FAILURE}"
    fi
    # NOTE: MINIMAL_MAJOR_OS_VERSION is important here!
    OS_TRIPPLE="${SYSTEM_NAME}-${MINIMAL_MAJOR_OS_VERSION}-${SYSTEM_ARCH}"
    SYS_SPECIFIC_BINARY_REMOTE="${MAIN_BINARY_PREFIX}/${OS_TRIPPLE}"
else
    # Fallback to static version default:
    SYSTEM_VERSION="${MINIMAL_MAJOR_OS_VERSION}"
    OS_TRIPPLE="${SYSTEM_NAME}-${MINIMAL_MAJOR_OS_VERSION}-${SYSTEM_ARCH}"
    SYS_SPECIFIC_BINARY_REMOTE="${MAIN_BINARY_PREFIX}/${OS_TRIPPLE}"
fi

# Since Git is often used in defaunitions, we're allowing definitions to use it's path:
if [ -x "${GIT_BIN}" ] \
&& [ -z "${GIT_EXPORTS}" ]; then
    # by default try exported git from default Git bundle:
    GIT_EXPORTS="$(${DIRNAME_BIN} "${GIT_BIN}" 2>/dev/null)/exports"
    if [ -x "${GIT_EXPORTS}/git" ]; then
        GIT_EXPORTS=":${GIT_EXPORTS}"
    else
        GIT_EXPORTS="$(${DIRNAME_BIN} "${GIT_BIN}" 2>/dev/null)/bin"
        if [ -x "${GIT_EXPORTS}/git" ]; then
            GIT_EXPORTS=":${GIT_EXPORTS}"
        else
            unset GIT_EXPORTS
        fi
    fi
else
    unset GIT_EXPORTS
fi


# Default compiler backend - LLVM Clang
CC_NAME="clang"
CXX_NAME="${CC_NAME}++"
CPP_NAME="${CC_NAME}-cpp"

# Compiler flags:
SINGLE_ERROR_CFLAGS="-ferror-limit=1"
LTO_CFLAGS="-flto=thin -ffat-lto-objects -fuse-linker-plugin"
CFI_CFLAGS="-fsanitize=cfi -fvisibility=hidden"
ASAN_CFLAGS="-fsanitize=address"
CXX11_CXXFLAGS="-std=c++11"
CXX14_CXXFLAGS="-std=c++14"
CXX17_CXXFLAGS="-std=c++17"
RETPOLINE_CFLAGS="-mretpoline -Wl,-z,retpolineplt"
SSP_BUFFER_OVERRIDE="--param ssp-buffer-size=4"
HARDEN_CFLAGS="-fstack-protector -fstack-protector-strong -fstack-protector-all -fno-strict-overflow -Wformat -Wformat-security"
HARDEN_OFLOW_CFLAGS="-ftrapv"
HARDEN_SAFE_STACK_FLAGS="-fsanitize=safe-stack"
HARDEN_CMACROS="-D_FORTIFY_SOURCE=2"
HARDEN_CFLAGS_PRODUCTION="-Wl,-z,relro,-z,now"
HARDEN_LDFLAGS_PRODUCTION="-z relro -z now"


SOFIN_SHELL_BLOCK=$(${CAT_BIN} <<EOF

# Sofin launcher function:
s () {
    eval /Software/Sofin/bin/s \${@}
}

# Trap USR2 signal to reload ~/.profile:
trap '. "\${HOME}/.profile"' USR2
if [ -e "\${HOME}/.profile" ]; then
    source "\${HOME}/.profile"
fi

EOF
)


setup_zfs_default_setup () {
    # _zpool="$(${ZPOOL_BIN} list -H 2>/dev/null | eval "${FIRST_ARG_GUARD}")"
    # if [ -n "${_zpool}" ]; then
    #     DEFAULT_ZPOOL="${_zpool}"
    # fi

    # For ZFS we don't use tarballs anymore:
    DEFAULT_ARCHIVE_EXT="${DEFAULT_SOFTWARE_SNAPSHOT_EXT}"
}


fallback_nonzfs_setup () {
    # NOTE: Even if ZFS is present on OSX; We want it disabled (for now)
    unset CAP_SYS_ZFS ORIGIN_ZFS_SNAP_NAME DEFAULT_ZPOOL ZFS_SEND_OPTS ZFS_RECEIVE_OPTS
    # 1. ZFS default archive extension determines file type
    # 2. Fallback to tarballs on ZFS-less OSes is done by capability check
    DEFAULT_ARCHIVE_EXT="${DEFAULT_ARCHIVE_TARBALL_EXT}"
}


determine_system_capabilites () {
    env_forgivable
    ${ZPOOL_BIN} list -H >/dev/null 2>&1
    if [ "${?}" = "0" ]; then
        CAP_SYS_ZFS=YES
        if [ "${SYSTEM_NAME}" = "Darwin" ]; then
            fallback_nonzfs_setup
        else
            setup_zfs_default_setup
        fi
    else # NOTE: fallback, cause zpool command failed:
        fallback_nonzfs_setup
    fi

    _hardening_version="$(${SYSCTL_BIN} -n hardening.version 2>/dev/null)"
    if [ "${_hardening_version:-0}" -ge "${MIN_HARDENING_VERSION:-11}" ]; then
        CAP_SYS_HARDENED_VERSION="${_hardening_version:-0}"
        CAP_SYS_HARDENED="YES"

        # render other useful security enforcements:
        # NOTE: PAX feature is enforced if value >2 (with value 3, there's no xattr override possibility, so default is "2")
        CAP_SYS_HARDENED_PAX_ASLR="$(${SYSCTL_BIN} -n hardening.pax.aslr.status 2>/dev/null)"
        if [ "${CAP_SYS_HARDENED_PAX_ASLR}" -le "1" ]; then
            unset CAP_SYS_HARDENED_PAX_ASLR
        else
            CAP_SYS_HARDENED_PAX_ASLR=YES
        fi
        CAP_SYS_HARDENED_PAX_MPROTECT="$(${SYSCTL_BIN} -n hardening.pax.mprotect.status 2>/dev/null)"
        if [ "${CAP_SYS_HARDENED_PAX_MPROTECT}" -le "1" ]; then
            unset CAP_SYS_HARDENED_PAX_MPROTECT
        else
            CAP_SYS_HARDENED_PAX_MPROTECT=YES
        fi
        CAP_SYS_HARDENED_PAX_PAGEEXEC="$(${SYSCTL_BIN} -n hardening.pax.pageexec.status 2>/dev/null)"
        if [ "${CAP_SYS_HARDENED_PAX_PAGEEXEC}" -le "1" ]; then
            unset CAP_SYS_HARDENED_PAX_PAGEEXEC
        else
            CAP_SYS_HARDENED_PAX_PAGEEXEC=YES
        fi
        CAP_SYS_HARDENED_PAX_SEGVGUARD="$(${SYSCTL_BIN} -n hardening.pax.segvguard.status 2>/dev/null)"
        if [ "${CAP_SYS_HARDENED_PAX_SEGVGUARD}" -le "1" ]; then
            unset CAP_SYS_HARDENED_PAX_SEGVGUARD
        else
            CAP_SYS_HARDENED_PAX_SEGVGUARD=YES
        fi
        CAP_SYS_HARDENED_PAX_DISALLOW_MAP32BIT="$(${SYSCTL_BIN} -n hardening.pax.disallow_map32bit.status 2>/dev/null)"
        if [ "${CAP_SYS_HARDENED_PAX_DISALLOW_MAP32BIT}" -le "1" ]; then
            unset CAP_SYS_HARDENED_PAX_DISALLOW_MAP32BIT
        else
            CAP_SYS_HARDENED_PAX_DISALLOW_MAP32BIT=YES
        fi
    else
        unset CAP_SYS_HARDENED CAP_SYS_HARDENED_VERSION CAP_SYS_HARDENED_PAX_ASLR CAP_SYS_HARDENED_PAX_MPROTECT CAP_SYS_HARDENED_PAX_PAGEEXEC CAP_SYS_HARDENED_PAX_SEGVGUARD CAP_SYS_HARDENED_PAX_DISALLOW_MAP32BIT
    fi

    if [ -f "/usr/include/kvm.h" ] \
    && [ -f "/usr/lib/libkvm.so" ] \
    && [ -f "/usr/lib/libprocstat.so" ]; then
        CAP_SYS_KERNEL_KVM=YES
        CAP_SYS_KERNEL_PROCSTAT=YES
    else
        unset CAP_SYS_KERNEL_KVM CAP_SYS_KERNEL_PROCSTAT
    fi

    _jailed="$(${SYSCTL_BIN} -n security.jail.jailed 2>/dev/null)"
    if [ "1" = "${_jailed}" ]; then
        # NOTE: For jails, use jail hostname as dataset prefixed user:
        SYSTEM_DATASET="${HOST:-$(hostname 2>/dev/null)}"
        CAP_SYS_JAILED=YES
    else
        # NOTE: For non-jails, use local USER name as dataset prefixed user:
        SYSTEM_DATASET="${USER:-$(id -u 2>/dev/null)}"
        unset CAP_SYS_JAILED
    fi

    if [ -x "${DTRACE_BIN}" ]; then
        CAP_SYS_DTRACE=YES
    else
        unset CAP_SYS_DTRACE
    fi

    _linux64_binary_support="$(${SYSCTL_BIN} -n kern.features.linux64 2>/dev/null)"
    if [ "${_linux64_binary_support}" = "1" ]; then
        CAP_SYS_LINUX64_ABI=YES
    else
        unset CAP_SYS_LINUX64_ABI
    fi

    # Production mode is default mode
    CAP_SYS_PRODUCTION=YES

    if [ -f "${SERVED_BUILDHOST_INDICATOR_FILE}" ] \
    || [ -f "${SERVED_BUILDHOST_INDICATOR_FILE_ALT}" ]; then
        CAP_SYS_BUILDHOST=YES
        unset CAP_SYS_PRODUCTION
    else
        unset CAP_SYS_BUILDHOST
    fi

    if [ "Darwin" = "${SYSTEM_NAME}" ]; then
        CAP_SYS_WORKSTATION=YES
        CAP_SYS_BUILDHOST=YES
        unset CAP_SYS_PRODUCTION
    else
        unset CAP_SYS_WORKSTATION
    fi

    # Detect available linkers:
    unset CAP_SYS_LLVM_LD CAP_SYS_GOLD_LD

    # NOTE: Default Linker pick/use order:
    # 1. LLVM Linker (ld.lld)
    # 2. Gold Linker (ld.gold)
    # 3. Legacy Linker (ld)
    #
    if [ -x "${GOLD_BIN}" ] \
    && [ -x "${GOLD_SO}" ]; then
        CAP_SYS_GOLD_LD=YES
    fi
    if [ -x "${LLD_BIN}" ]; then
        CAP_SYS_LLVM_LD=YES
    fi

    # NOTE: workstation system:
    if [ "Darwin" = "${SYSTEM_NAME}" ]; then
        # NOTE: Under Darwin we have to replace original linker with LLVM one.
        #       On this system it has to be: /usr/bin/ld.
        # WARN: You may need to disable macOS SIP protection (10.11+) to modify files in /usr/bin
        unset CAP_SYS_GOLD_LD CAP_SYS_LLVM_LD
    fi
}
