# Terminal definitions

LOGNAME="${LOGNAME:-${USER}}"
SHELL="${SHELL:-${ZSH_BIN}}"
TERM="${TERM:-xterm-256color}"
BLOCKSIZE="${BLOCKSIZE:-K}"

TTY="NO"
MAX_COLS=80
SUCCESS_CHAR="V"
TRY_CHAR="?"
RUN_CHAR="!"
WARN_CHAR="*"
NOTE_CHAR=">"
FAIL_CHAR="#"
NOTE_CHAR2="-"
SEPARATOR_CHAR="_"
SEPARATOR_CHAR2="-"
if [ -t 1 ]; then
    TTY="YES"
    TRY_CHAR="⁇"
    RUN_CHAR="⁈"
    SUCCESS_CHAR="✓"
    WARN_CHAR="❣"
    NOTE_CHAR="→"
    NOTE_CHAR2="»"
    FAIL_CHAR="✘"
    SEPARATOR_CHAR="┈"
    SEPARATOR_CHAR2="─"
fi

if [ "NO" = "${TTY}" ]; then
    CAP_TERM_NON_INTERACTIVE=YES
    unset CAP_TERM_INTERACTIVE
else
    CAP_TERM_INTERACTIVE=YES
    unset CAP_TERM_NON_INTERACTIVE
fi

# Line replay ANSI codes:
ANSI_ONE_LINE_UP="\r\033[1A"
ANSI_TWO_LINES_UP="\r\033[2A"
ANSI_THREE_LINES_UP="\r\033[3A"

ANSI_ONE_LINE_DOWN="\r\033[1C"
ANSI_TWO_LINES_DOWN="\r\033[2C"
ANSI_THREE_LINES_DOWN="\r\033[3C"


# determine TERM capabilities:
determine_term_capabilites () {
    env_forgivable
    if [ -n "${ZSH_VERSION}" ]; then
        # if Zsh is still running as sh, so we want to load some Zsh fancy features:
        zmodload zsh/parameter 2>/dev/null
        setopt debugbeforecmd 2>/dev/null
        setopt appendhistory 2>/dev/null
        setopt extendedhistory 2>/dev/null
        # NOTE: don't send HUP on shell exit:
        unsetopt hup 2>/dev/null
        # NOTE: required for funcstack to work:
        setopt evallineno 2>/dev/null
        # NOTE: don't do notification on signal handling:
        unsetopt monitor 2>/dev/null

        CAP_TERM_ZSH=YES
        unset CAP_TERM_BASH CAP_TERM_SH

    elif [ -n "${BASH_VERSION}" ]; then
        CAP_TERM_BASH=YES
        unset CAP_TERM_ZSH CAP_TERM_SH

    else # fallback to most limited "/bin/sh" legacy-shell:
        CAP_TERM_SH=YES
        unset CAP_TERM_ZSH CAP_TERM_BASH
    fi

    printf "%b\n" "${LANG}" | ${GREP_BIN} -F ".UTF-8" >/dev/null 2>&1
    if [ "0" = "${?}" ]; then
        CAP_TERM_UNICODE=YES
        unset CAP_TERM_ASCII
    else
        CAP_TERM_ASCII=YES
        unset CAP_TERM_UNICODE
    fi

    printf "%b\n" "${TERM}" | ${GREP_BIN} -F "256color" >/dev/null 2>&1
    if [ "0" = "${?}" ]; then
        CAP_TERM_ANSI_COLORS=YES
        unset CAP_TERM_NO_COLORS
    else
        CAP_TERM_NO_COLORS=YES
        unset CAP_TERM_ANSI_COLORS
    fi

    ${TPUT_BIN} setaf 0 >/dev/null 2>&1
    if [ "${?}" != "0" ]; then # broken with tput under FreeBSD, related bug: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210858
        unset CAP_TERM_TPUT_UTILITY

        # Use legacy ANSI definitions:
        ColorGray="\033[39m" # default color of terminal
        ColorDarkgray="\033[90m"
        ColorRed="\033[31m"
        ColorGreen="\033[32m"
        ColorYellow="\033[33m"
        ColorOrange="\033[38;5;172m"
        ColorBlue="\033[34m"
        ColorMagenta="\033[35m"
        ColorCyan="\033[36m"
        ColorWhite="\033[97m"
        ColorParams="\033[38;5;12m"
        ColorViolet="\033[38;5;97m"
        ColorFunction="\033[38;5;163m"
    else
        CAP_TERM_TPUT_UTILITY=YES

        ColorRed="$(${TPUT_BIN} setaf 1)"
        ColorGreen="$(${TPUT_BIN} setaf 2)"
        ColorYellow="$(${TPUT_BIN} setaf 3)"
        ColorBlue="$(${TPUT_BIN} setaf 4)"
        ColorMagenta="$(${TPUT_BIN} setaf 5)"
        ColorCyan="$(${TPUT_BIN} setaf 6)"
        ColorGray="$(${TPUT_BIN} setaf 7)" # default color of terminal
        ColorWhite="$(${TPUT_BIN} setaf 15)"
        ColorOrange="$(${TPUT_BIN} setaf 172)"
        ColorParams="$(${TPUT_BIN} setaf 12)"
        ColorViolet="$(${TPUT_BIN} setaf 97)"
        ColorFunction="$(${TPUT_BIN} setaf 163)"
    fi

    ColorReset="${ColorGray}"
    ColorExample="${ColorOrange}"
    ColorDistinct="${ColorCyan}"
    ColorDebug="${ColorViolet}"
    ColorNote="${ColorGreen}"
    ColorWarning="${ColorYellow}"
    ColorError="${ColorRed}"
}
